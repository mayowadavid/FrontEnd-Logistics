{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\AuthContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { loginValidate, singupValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nimport { auth, database, provider, functions } from '../firebase';\nimport axios from 'axios';\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthContextProvider = props => {\n  const {\n    0: isLogin,\n    1: setisLogin\n  } = useState(false);\n  const {\n    0: sessionToken,\n    1: setSessionToken\n  } = useState();\n  const {\n    0: signup,\n    1: setSignup\n  } = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    password: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      password: ''\n    }\n  });\n  const {\n    0: resetPassword,\n    1: setResetPassword\n  } = useState({\n    email: '',\n    formErrors: {\n      email: ''\n    }\n  });\n  const {\n    0: login,\n    1: setLogin\n  } = useState({\n    email: '',\n    password: '',\n    formErrors: {\n      email: '',\n      password: ''\n    }\n  });\n  const {\n    0: authenticate,\n    1: setAuthenticate\n  } = useState(false);\n  const {\n    0: authenticating,\n    1: setAuthenticating\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const router = useRouter();\n  const {\n    0: success,\n    1: setSuccess\n  } = useState({\n    message: '',\n    token: '',\n    user: {\n      email: '',\n      firstName: '',\n      fullName: '',\n      lastName: '',\n      role: '',\n      _id: ''\n    }\n  });\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user == null ? setisLogin(false) : setisLogin(true);\n    });\n  }, []);\n\n  const handleLoginChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      formErrors\n    } = login;\n    loginValidate(name, value, formErrors);\n\n    let newLogin = _objectSpread(_objectSpread({}, login), {}, {\n      [name]: value\n    });\n\n    return setLogin(newLogin);\n  };\n\n  const handleSignupChange = e => {\n    const {\n      formErrors\n    } = _objectSpread({}, signup);\n\n    const {\n      name,\n      value\n    } = e.target;\n    singupValidate(name, value, formErrors);\n\n    let newSignup = _objectSpread(_objectSpread({}, signup), {}, {\n      [name]: value\n    });\n\n    return setSignup(newSignup);\n  };\n\n  const handleSignupSubmit = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\n      return database.collection('Profile').doc(cred.user.uid).set({\n        phoneNumber,\n        email,\n        firstName,\n        lastName\n      });\n    }).then(() => {\n      setisLogin(true);\n      router.replace('dashboard');\n    });\n  };\n\n  const handleAdminSignUp = e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    console.log(email);\n    axios.post('https://us-central1-managerbran-2a699.cloudfunctions.net/addAdminRole', {\n      email\n    }, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).catch(function (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n\n      console.log(error.config);\n    }); // auth.createUserWithEmailAndPassword(email, password).then(cred =>{\n    //   return database.collection('Profile').doc(cred.user.uid).set({\n    //     phoneNumber, email, firstName, lastName\n    //   })}\n    // ).then(()=>{\n    //   setisLogin(true);\n    //   router.replace('dashboard');\n    // } )\n  };\n\n  const handleSignout = e => {\n    e.preventDefault();\n    auth.signOut().then(() => {// Sign-out successful.\n    }).catch(error => {// An error happened.\n    });\n  };\n\n  const passwordReset = e => {\n    e.preventDefault();\n    const {\n      email\n    } = resetPassword;\n    auth.sendPasswordResetEmail(email).then(() => {}).catch(error => {\n      setError(error.message);\n    });\n  };\n\n  const handlePasswordChange = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      formErrors\n    } = resetPassword;\n    const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\n    formErrors.email = emailRegex.test(value) && value.length > 0 ? '' : '*input a valid email address*';\n    setResetPassword(_objectSpread(_objectSpread({}, resetPassword), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleSocialLogin = e => {\n    e.preventDefault();\n    auth.signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user;\n      let data = user.displayName.split(\" \");\n      let firstName = data[0];\n      let lastName = data[1];\n      let email = result.user.email;\n      user && user.uid && setLogin(true);\n      return database.collection('Profile').doc(result.user.uid).set({\n        firstName,\n        lastName,\n        email\n      }); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n    });\n  };\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    setAuthenticating(true);\n    const {\n      email,\n      password\n    } = login;\n    auth.signInWithEmailAndPassword(email, password).then(() => {\n      setisLogin(true);\n      router.replace('dashboard');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      sessionToken,\n      setSessionToken,\n      passwordReset,\n      resetPassword,\n      handlePasswordChange,\n      login,\n      signup,\n      isLogin,\n      setisLogin,\n      handleLoginChange,\n      handleSocialLogin,\n      handleSignupChange,\n      handleAdminSignUp,\n      handleSignout,\n      handleSignupSubmit,\n      handleLoginSubmit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["F:/G4 Logistics/FrontEnd/components/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","loginValidate","singupValidate","useRouter","auth","database","provider","functions","axios","AuthContext","AuthContextProvider","props","isLogin","setisLogin","sessionToken","setSessionToken","signup","setSignup","firstName","lastName","email","phoneNumber","password","formErrors","resetPassword","setResetPassword","login","setLogin","authenticate","setAuthenticate","authenticating","setAuthenticating","error","setError","router","success","setSuccess","message","token","user","fullName","role","_id","onAuthStateChanged","handleLoginChange","e","name","value","target","newLogin","handleSignupChange","newSignup","handleSignupSubmit","preventDefault","createUserWithEmailAndPassword","then","cred","collection","doc","uid","set","replace","handleAdminSignUp","console","log","post","headers","catch","response","data","status","request","config","handleSignout","signOut","passwordReset","sendPasswordResetEmail","handlePasswordChange","emailRegex","RegExp","test","length","handleSocialLogin","signInWithPopup","result","credential","accessToken","displayName","split","errorCode","code","errorMessage","handleLoginSubmit","signInWithEmailAndPassword","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { loginValidate, singupValidate } from '../validator/validate';\r\nimport {useRouter} from 'next/router';\r\nimport { auth, database, provider, functions } from '../firebase';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n\r\n    const [isLogin, setisLogin] = useState(false); \r\n    const [sessionToken, setSessionToken] = useState(); \r\n    const [signup, setSignup] = useState({\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      phoneNumber: '',\r\n      password: '',\r\n      formErrors: {\r\n          firstName: '',\r\n          lastName: '',\r\n          email: '',\r\n          phoneNumber: '',\r\n          password: '',\r\n      }\r\n    });\r\n\r\n    const [resetPassword, setResetPassword] = useState({\r\n        email: '',\r\n        formErrors: {\r\n            email: ''\r\n        }\r\n      });\r\n\r\n    const [login, setLogin] = useState({\r\n        email: '',\r\n        password: '',\r\n        formErrors: {\r\n            email: '',\r\n            password: ''\r\n        }\r\n      });\r\n\r\n      const [authenticate, setAuthenticate] = useState(false);\r\n      const [authenticating, setAuthenticating] = useState(false);\r\n      const [error, setError] = useState('');\r\n      const router = useRouter();\r\n      const [success, setSuccess] = useState({\r\n          message: '',\r\n          token: '',\r\n          user: {email: '',\r\n          firstName: '',\r\n          fullName: '',\r\n          lastName: '',\r\n          role: '',\r\n          _id: ''} \r\n      });\r\n\r\n      useEffect(()=>{\r\n        auth.onAuthStateChanged(user=>{\r\n          user == null ? setisLogin(false) : setisLogin(true);\r\n        })\r\n      }, [])\r\n\r\n    const handleLoginChange = (e) => {\r\n        const {name, value} = e.target;\r\n        const{formErrors} = login;\r\n        loginValidate(name, value, formErrors);\r\n            let newLogin = { ...login, [name]: value }\r\n            return setLogin(newLogin)\r\n    } \r\n\r\n    const handleSignupChange = (e) => {\r\n        const{formErrors} = {...signup}\r\n        const {name, value} = e.target;\r\n        singupValidate(name, value, formErrors)\r\n            let newSignup = { ...signup, [name]: value }\r\n            return setSignup(newSignup)\r\n    }\r\n\r\n\r\n    const handleSignupSubmit = async(e) => {\r\n        e.preventDefault();\r\n        const {firstName, lastName, email, phoneNumber, password} = signup;\r\n        auth.createUserWithEmailAndPassword(email, password).then(cred =>{\r\n          return database.collection('Profile').doc(cred.user.uid).set({\r\n            phoneNumber, email, firstName, lastName\r\n          })}\r\n        ).then(()=>{\r\n          setisLogin(true);\r\n          router.replace('dashboard');\r\n        } )\r\n    }\r\n\r\n    const handleAdminSignUp = (e) => {\r\n      e.preventDefault();\r\n      const {firstName, lastName, email, phoneNumber, password} = signup;\r\n      console.log(email);\r\n      axios.post('https://us-central1-managerbran-2a699.cloudfunctions.net/addAdminRole', \r\n        {email},{headers: {'content-type': 'application/json'}}\r\n      ).catch(function (error) {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n        console.log(error.config);\r\n      });\r\n      // auth.createUserWithEmailAndPassword(email, password).then(cred =>{\r\n      //   return database.collection('Profile').doc(cred.user.uid).set({\r\n      //     phoneNumber, email, firstName, lastName\r\n      //   })}\r\n      // ).then(()=>{\r\n      //   setisLogin(true);\r\n      //   router.replace('dashboard');\r\n      // } )\r\n    }\r\n    \r\n    const handleSignout = (e) => {\r\n      e.preventDefault();\r\n      auth.signOut().then(() => {\r\n        // Sign-out successful.\r\n      }).catch((error) => {\r\n        // An error happened.\r\n      });\r\n  }\r\n  const passwordReset = (e) => {\r\n    e.preventDefault();\r\n    const {email}= resetPassword;\r\n    auth.sendPasswordResetEmail(email).then(()=> {})\r\n    .catch((error) =>{\r\n      setError(error.message);\r\n    })\r\n  }\r\n\r\n  const handlePasswordChange = (e) => {\r\n    e.preventDefault();\r\n    const {name, value} = e.target;\r\n    const {formErrors} = resetPassword;\r\n    const emailRegex = RegExp( /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\n    formErrors.email = emailRegex.test(value) && value.length > 0 ? '': '*input a valid email address*';\r\n    setResetPassword({...resetPassword, [name]: value});\r\n  }\r\n\r\n  const handleSocialLogin = (e) => {\r\n    e.preventDefault();\r\n    auth.signInWithPopup(provider).then((result) => {\r\n      /** @type {firebase.auth.OAuthCredential} */\r\n      var credential = result.credential;\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      var token = credential.accessToken;\r\n      // The signed-in user info.\r\n      var user = result.user;\r\n      let data = user.displayName.split(\" \");\r\n      let firstName= data[0];\r\n      let lastName = data[1];\r\n      let email= result.user.email;\r\n      user && (user.uid && setLogin(true));\r\n       return database.collection('Profile').doc(result.user.uid).set({\r\n          firstName, lastName, email\r\n        })\r\n      // ...\r\n    }).catch((error) => {\r\n      // Handle Errors here.\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      // The email of the user's account used.\r\n      var email = error.email;\r\n      // The firebase.auth.AuthCredential type that was used.\r\n      var credential = error.credential;\r\n      // ...\r\n    });\r\n  }\r\n\r\n  const handleLoginSubmit = (e) => {\r\n    e.preventDefault();\r\n    setAuthenticating(true);\r\n    const {email, password } = login;\r\n    auth.signInWithEmailAndPassword(email, password).then(()=>{\r\n    setisLogin(true);\r\n    router.replace('dashboard');\r\n      })\r\n  }; \r\n      \r\n      \r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{sessionToken, setSessionToken, passwordReset, resetPassword, handlePasswordChange, login, signup, isLogin, setisLogin, handleLoginChange, handleSocialLogin, handleSignupChange, handleAdminSignUp, handleSignout, handleSignupSubmit, handleLoginSubmit}}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}