{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\ClientContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { object } from 'prop-types';\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from '../../helpers/axios';\nimport { generatePublicUrl } from '../../urlConfig';\nimport { profileValidate } from '../validator/validate';\nimport { auth, store, database } from '../firebase';\nexport const ClientContext = /*#__PURE__*/createContext();\n\nconst ClientContextProvider = props => {\n  const initialState = {\n    firstName: 'mayor',\n    lastName: 'james',\n    email: 'mayowadavid100@gmail.com',\n    phoneNumber: '09087536643',\n    address: 'abule foli',\n    profileImage: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      address: ''\n    }\n  };\n  const {\n    0: profile,\n    1: setProfile\n  } = useState(initialState);\n  useEffect(() => {\n    const {\n      formErrors\n    } = initialState;\n    auth.onAuthStateChanged(user => {\n      user !== null && database.collection('Profile').doc(user.uid).get().then(doc => {\n        let value = doc.data();\n        setProfile({\n          value,\n          formErrors\n        });\n      });\n    });\n  }, []); // .type !== Format[0] || Format[1] || Format[2]) && (profileImage.size <= Format[2] || profileImage.size <= Format[3])\n\n  const {\n    0: profileImage,\n    1: setProfileImage\n  } = useState();\n  const {\n    0: temporaryImage,\n    1: setTemporaryImage\n  } = useState();\n  const {\n    0: count,\n    1: setCount\n  } = useState();\n  const {\n    0: transaction,\n    1: setTransaction\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n\n  const handleProfileChange = e => {\n    e.preventDefault();\n\n    if (e.target.files) {\n      let selected = e.target.files[0];\n      let types = ['image/jpeg', 'image/png'];\n      let fileType = selected !== undefined ? types.includes(selected.type) : setError(\"unsupported image type* accepted image jpg/png\");\n      let FileSize = \"5000000\";\n      let filteredImageSize = fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\");\n      let hold = filteredImageSize == true && URL.createObjectURL(selected);\n      hold !== undefined && setTemporaryImage(hold);\n\n      if (filteredImageSize == true) {\n        const storageRef = store.ref(`profileimages/${selected.name}`);\n        storageRef.put(selected).on('state_changed', async snap => {\n          const newPercentage = (await (snap.bytesTransferred / snap.totalBytes)) * 100;\n          await setProgress(newPercentage);\n        }, async err => {\n          await setError(err);\n        }, async () => {\n          const newUrl = await storageRef.getDownloadURL();\n          await setProfileImage(newUrl);\n        });\n      }\n\n      URL.revokeObjectURL(selected);\n    }\n  };\n\n  const profileDetails = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n\n    let {\n      formErrors\n    } = _objectSpread({}, profile);\n\n    profileValidate(name, value, formErrors);\n    return setProfile(_objectSpread(_objectSpread({}, profile), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleProfileSubmit = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      address,\n      profileImage\n    } = profile;\n    database.collection('Profile').add({\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      address,\n      profileImage\n    }); //   const token = localStorage && localStorage.getItem('token');\n    //   let res = await axios.post('/profile/update', profile, { headers: {\n    //     'Authorization': token ? `Bearer ${token}`: ''\n    // }});\n    //   if(res.status == 201){\n    //     const {updatedProfile} = res.data;\n    //     const {profileImage} = updatedProfile;\n    //    setTemporaryImage(profileImage);\n    //   }\n    //   ;\n  };\n\n  const handleProfilePreview = e => {\n    e.preventDefault();\n    setProfile(_objectSpread(_objectSpread({}, profile), {}, {\n      profileImage\n    }));\n    setCount('active');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      transaction,\n      setTransaction,\n      handleProfileChange,\n      handleProfilePreview,\n      handleProfileSubmit,\n      profile,\n      setProfile,\n      setTemporaryImage,\n      temporaryImage,\n      profileDetails,\n      profileImage,\n      setProfileImage,\n      count,\n      setCount\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ClientContextProvider;","map":{"version":3,"sources":["F:/G4 Logistics/FrontEnd/components/context/ClientContext.js"],"names":["object","React","createContext","useState","useEffect","axios","generatePublicUrl","profileValidate","auth","store","database","ClientContext","ClientContextProvider","props","initialState","firstName","lastName","email","phoneNumber","address","profileImage","formErrors","profile","setProfile","onAuthStateChanged","user","collection","doc","uid","get","then","value","data","setProfileImage","temporaryImage","setTemporaryImage","count","setCount","transaction","setTransaction","error","setError","progress","setProgress","handleProfileChange","e","preventDefault","target","files","selected","types","fileType","undefined","includes","type","FileSize","filteredImageSize","size","hold","URL","createObjectURL","storageRef","ref","name","put","on","snap","newPercentage","bytesTransferred","totalBytes","err","newUrl","getDownloadURL","revokeObjectURL","profileDetails","handleProfileSubmit","add","handleProfilePreview","children"],"mappings":"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","sourcesContent":["import { object } from 'prop-types';\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport axios from '../../helpers/axios';\r\nimport {generatePublicUrl} from '../../urlConfig';\r\nimport { profileValidate } from '../validator/validate';\r\nimport {auth, store, database} from '../firebase';\r\n\r\nexport const ClientContext = createContext();\r\n\r\nconst ClientContextProvider = (props) => {\r\n\r\n    const initialState = {\r\n      firstName: 'mayor',\r\n      lastName: 'james',\r\n      email: 'mayowadavid100@gmail.com',\r\n      phoneNumber: '09087536643', \r\n      address: 'abule foli',\r\n      profileImage: '',\r\n      formErrors: {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phoneNumber: '', \r\n        address: ''\r\n      }\r\n    }\r\n\r\n    const [profile, setProfile] = useState(initialState);\r\n\r\n    useEffect(()=>{\r\n      const {formErrors} = initialState;\r\n      auth.onAuthStateChanged(user=>{\r\n        user !== null && database.collection('Profile').doc(user.uid).get().then(doc=>{\r\n          let value = doc.data()\r\n          setProfile({value, formErrors});\r\n        });\r\n      })\r\n    }, [])\r\n\r\n\r\n    // .type !== Format[0] || Format[1] || Format[2]) && (profileImage.size <= Format[2] || profileImage.size <= Format[3])\r\n\r\n    const [profileImage, setProfileImage] = useState();\r\n    const[temporaryImage, setTemporaryImage]= useState();\r\n    const [count, setCount] = useState();\r\n    const [transaction, setTransaction] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    const handleProfileChange = (e) => {\r\n        e.preventDefault();  \r\n       if(e.target.files){\r\n         let selected = e.target.files[0];\r\n        let types = ['image/jpeg', 'image/png'];\r\n       let fileType = selected !== undefined ? types.includes(selected.type): setError(\"unsupported image type* accepted image jpg/png\");\r\n          let FileSize = \"5000000\";\r\n         let filteredImageSize= fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\"); \r\n         let hold = filteredImageSize == true && (URL.createObjectURL(selected)); \r\n         hold !== undefined && setTemporaryImage(hold);\r\n          if(filteredImageSize == true ){\r\n          const storageRef = store.ref(`profileimages/${selected.name}`);\r\n            storageRef.put(selected).on('state_changed', \r\n            async (snap) => {\r\n              const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            await setProgress(newPercentage);\r\n            },  async (err) => {\r\n            await setError(err);\r\n            }, async () => {\r\n              const newUrl = await storageRef.getDownloadURL();\r\n            await setProfileImage(newUrl);\r\n            });\r\n          }\r\n         URL.revokeObjectURL(selected);   \r\n        }\r\n  };\r\n\r\n  const profileDetails = (e) => {\r\n    e.preventDefault();\r\n   \r\n    const {name, value} = e.target;\r\n    let {formErrors} = {...profile}\r\n\r\n    profileValidate(name, value, formErrors);\r\n      return setProfile({...profile,  [name]: value})  \r\n  }\r\n\r\n  const handleProfileSubmit = async(e) => {\r\n    e.preventDefault();\r\n    const {firstName,\r\n    lastName,\r\n    email,\r\n    phoneNumber, \r\n    address,\r\n    profileImage}= profile;\r\n    database.collection('Profile').add({firstName,\r\n      lastName,\r\n      email,\r\n      phoneNumber, \r\n      address,\r\n      profileImage})\r\n  //   const token = localStorage && localStorage.getItem('token');\r\n  //   let res = await axios.post('/profile/update', profile, { headers: {\r\n  //     'Authorization': token ? `Bearer ${token}`: ''\r\n  // }});\r\n  //   if(res.status == 201){\r\n  //     const {updatedProfile} = res.data;\r\n  //     const {profileImage} = updatedProfile;\r\n  //    setTemporaryImage(profileImage);\r\n  //   }\r\n  //   ;\r\n  }; \r\n  \r\n\r\n  const handleProfilePreview = (e) => {\r\n    e.preventDefault();\r\n    setProfile({...profile, profileImage});\r\n    setCount('active');\r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n    return (\r\n        <ClientContext.Provider value={{ transaction, setTransaction, handleProfileChange, handleProfilePreview, handleProfileSubmit, profile, setProfile, setTemporaryImage, temporaryImage, profileDetails, profileImage, setProfileImage, count, setCount}}>\r\n            {props.children}\r\n        </ClientContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ClientContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}