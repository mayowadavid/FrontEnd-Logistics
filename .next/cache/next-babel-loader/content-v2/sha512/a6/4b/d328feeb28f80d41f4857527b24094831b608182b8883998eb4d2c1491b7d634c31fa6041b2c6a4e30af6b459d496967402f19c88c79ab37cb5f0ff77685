{"ast":null,"code":"import { useState, useEffect, useContext } from 'react';\nimport { ClientContext } from '../context/ClientContext';\nimport { store } from '../firebase';\n\nconst useStorage = image => {\n  const {\n    setError,\n    setUrl,\n    setProgress,\n    progress,\n    url,\n    error\n  } = useContext(ClientContext);\n  const {\n    0: check,\n    1: setCheck\n  } = useState([]);\n  useEffect(() => {\n    // references\n    const storageRef = store.ref(`profileimages/${image.name}`);\n    storageRef.put(image).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const newUrl = await storageRef.getDownloadURL();\n      setUrl({\n        newUrl\n      });\n    });\n  }, [image]);\n  setCheck([...check, ...url]);\n  console.log(check);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["H:/G4 Logistics/FrontEnd/components/fireBase/storageHook.js"],"names":["useState","useEffect","useContext","ClientContext","store","useStorage","image","setError","setUrl","setProgress","progress","url","error","check","setCheck","storageRef","ref","name","put","on","snap","percentage","bytesTransferred","totalBytes","err","newUrl","getDownloadURL","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAAQC,KAAR,QAAoB,aAApB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA,QAAhC;AAA0CC,IAAAA,GAA1C;AAA+CC,IAAAA;AAA/C,MAAwDV,UAAU,CAACC,aAAD,CAAxE;AACA,QAAK;AAAA,OAACU,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAAC,EAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMc,UAAU,GAAGX,KAAK,CAACY,GAAN,CAAW,iBAAgBV,KAAK,CAACW,IAAK,EAAtC,CAAnB;AAGAF,IAAAA,UAAU,CAACG,GAAX,CAAeZ,KAAf,EAAsBa,EAAtB,CAAyB,eAAzB,EAA2CC,IAAD,IAAU;AAClD,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAd,MAAAA,WAAW,CAACY,UAAD,CAAX;AACD,KAHD,EAGIG,GAAD,IAAS;AACVjB,MAAAA,QAAQ,CAACiB,GAAD,CAAR;AACD,KALD,EAKG,YAAY;AACb,YAAMC,MAAM,GAAG,MAAMV,UAAU,CAACW,cAAX,EAArB;AACAlB,MAAAA,MAAM,CAAC;AAACiB,QAAAA;AAAD,OAAD,CAAN;AACD,KARD;AASD,GAdQ,EAcN,CAACnB,KAAD,CAdM,CAAT;AAgBAQ,EAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGF,GAAd,CAAD,CAAR;AACEgB,EAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AAEF,SAAO;AAAEH,IAAAA,QAAF;AAAYC,IAAAA,GAAZ;AAAiBC,IAAAA;AAAjB,GAAP;AACD,CAxBD;;AA0BA,eAAeP,UAAf","sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport { ClientContext } from '../context/ClientContext';\r\nimport {store} from '../firebase';\r\n\r\nconst useStorage = (image) => {\r\n  const {setError, setUrl, setProgress, progress, url, error} = useContext(ClientContext);\r\n  const[check, setCheck] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = store.ref(`profileimages/${image.name}`);\r\n   \r\n    \r\n    storageRef.put(image).on('state_changed', (snap) => {\r\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    }, async () => {\r\n      const newUrl = await storageRef.getDownloadURL();\r\n      setUrl({newUrl});\r\n    });\r\n  }, [image]);\r\n\r\n  setCheck([...check, ...url]);\r\n    console.log(check);\r\n\r\n  return { progress, url, error };\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}