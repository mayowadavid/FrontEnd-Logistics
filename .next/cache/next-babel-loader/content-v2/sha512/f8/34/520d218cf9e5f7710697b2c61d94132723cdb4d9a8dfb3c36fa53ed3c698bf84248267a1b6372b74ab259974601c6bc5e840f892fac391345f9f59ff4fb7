{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\AuthContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { loginValidate, singupValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nimport { auth, database, provider, functions } from '../firebase';\nimport axios from 'axios';\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthContextProvider = props => {\n  const {\n    0: isLogin,\n    1: setisLogin\n  } = useState(false);\n  const {\n    0: sessionToken,\n    1: setSessionToken\n  } = useState();\n  const {\n    0: signup,\n    1: setSignup\n  } = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    password: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      password: ''\n    }\n  });\n  const {\n    0: resetPassword,\n    1: setResetPassword\n  } = useState({\n    email: '',\n    formErrors: {\n      email: ''\n    }\n  });\n  const {\n    0: login,\n    1: setLogin\n  } = useState({\n    email: '',\n    password: '',\n    formErrors: {\n      email: '',\n      password: ''\n    }\n  });\n  const {\n    0: authenticate,\n    1: setAuthenticate\n  } = useState(false);\n  const {\n    0: authenticating,\n    1: setAuthenticating\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const router = useRouter();\n  const {\n    0: success,\n    1: setSuccess\n  } = useState({\n    message: '',\n    token: '',\n    user: {\n      email: '',\n      firstName: '',\n      fullName: '',\n      lastName: '',\n      role: '',\n      _id: ''\n    }\n  });\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user == null ? setisLogin(false) : setisLogin(true);\n    });\n  }, []);\n\n  const handleLoginChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      formErrors\n    } = login;\n    loginValidate(name, value, formErrors);\n\n    let newLogin = _objectSpread(_objectSpread({}, login), {}, {\n      [name]: value\n    });\n\n    return setLogin(newLogin);\n  };\n\n  const handleSignupChange = e => {\n    const {\n      formErrors\n    } = _objectSpread({}, signup);\n\n    const {\n      name,\n      value\n    } = e.target;\n    singupValidate(name, value, formErrors);\n\n    let newSignup = _objectSpread(_objectSpread({}, signup), {}, {\n      [name]: value\n    });\n\n    return setSignup(newSignup);\n  };\n\n  const handleSignupSubmit = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\n      return database.collection('Profile').doc(cred.user.uid).set({\n        phoneNumber,\n        email,\n        firstName,\n        lastName\n      });\n    }).then(() => {\n      setisLogin(true);\n      router.replace('dashboard');\n    });\n  };\n\n  const handleAdminSignUp = e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    const body = {\n      email\n    };\n    const headers = {\n      'content-type': \"application/json\",\n      'Access-Control-Allow-Origin': 'http://localhost:3000',\n      'Access-Control-Allow-Methods': 'post',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Origin': 'https://us-central1-managerbran-2a699.cloudfunctions.net'\n    }; // fetch(`https://us-central1-managerbran-2a699.cloudfunctions.net/addAdminRole`, {\n    //     method: \"POST\",\n    //     headers,\n    //     body: JSON.stringify(body)\n    // }).catch(function(error) {\n    //     if (error.response) {\n    //         // The request was made and the server responded with a status code\n    //         // that falls out of the range of 2xx\n    //         console.log(error.response.data);\n    //         console.log(error.response.status);\n    //         console.log(error.response.headers);\n    //     } else if (error.request) {\n    //         // The request was made but no response was received\n    //         // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n    //         // http.ClientRequest in node.js\n    //         console.log(error.request);\n    //     } else {\n    //         // Something happened in setting up the request that triggered an Error\n    //         console.log('Error', error.message);\n    //     }\n    //     console.log(error.config);\n    // });\n\n    const addAdminRole = functions.httpsCallable('addAdminRole');\n    addAdminRole({\n      email\n    }).then(result => {\n      console.log(result);\n    });\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\n      return database.collection('Profile').doc(cred.user.uid).set({\n        phoneNumber,\n        email,\n        firstName,\n        lastName\n      });\n    }).then(data => {\n      console.log(data); //   setisLogin(true);\n      //   router.replace('dashboard');\n    });\n  };\n\n  const handleSignout = e => {\n    e.preventDefault();\n    auth.signOut().then(() => {// Sign-out successful.\n    }).catch(error => {// An error happened.\n    });\n  };\n\n  const passwordReset = e => {\n    e.preventDefault();\n    const {\n      email\n    } = resetPassword;\n    auth.sendPasswordResetEmail(email).then(() => {}).catch(error => {\n      setError(error.message);\n    });\n  };\n\n  const handlePasswordChange = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      formErrors\n    } = resetPassword;\n    const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\n    formErrors.email = emailRegex.test(value) && value.length > 0 ? '' : '*input a valid email address*';\n    setResetPassword(_objectSpread(_objectSpread({}, resetPassword), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleSocialLogin = e => {\n    e.preventDefault();\n    auth.signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user;\n      let data = user.displayName.split(\" \");\n      let firstName = data[0];\n      let lastName = data[1];\n      let email = result.user.email;\n      user && user.uid && setLogin(true);\n      return database.collection('Profile').doc(result.user.uid).set({\n        firstName,\n        lastName,\n        email\n      }); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n    });\n  };\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    setAuthenticating(true);\n    const {\n      email,\n      password\n    } = login;\n    auth.signInWithEmailAndPassword(email, password).then(() => {\n      setisLogin(true);\n      router.replace('dashboard');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      sessionToken,\n      setSessionToken,\n      passwordReset,\n      resetPassword,\n      handlePasswordChange,\n      login,\n      signup,\n      isLogin,\n      setisLogin,\n      handleLoginChange,\n      handleSocialLogin,\n      handleSignupChange,\n      handleAdminSignUp,\n      handleSignout,\n      handleSignupSubmit,\n      handleLoginSubmit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["G:/G4 Logistics/FrontEnd/components/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","loginValidate","singupValidate","useRouter","auth","database","provider","functions","axios","AuthContext","AuthContextProvider","props","isLogin","setisLogin","sessionToken","setSessionToken","signup","setSignup","firstName","lastName","email","phoneNumber","password","formErrors","resetPassword","setResetPassword","login","setLogin","authenticate","setAuthenticate","authenticating","setAuthenticating","error","setError","router","success","setSuccess","message","token","user","fullName","role","_id","onAuthStateChanged","handleLoginChange","e","name","value","target","newLogin","handleSignupChange","newSignup","handleSignupSubmit","preventDefault","createUserWithEmailAndPassword","then","cred","collection","doc","uid","set","replace","handleAdminSignUp","body","headers","addAdminRole","httpsCallable","result","console","log","data","handleSignout","signOut","catch","passwordReset","sendPasswordResetEmail","handlePasswordChange","emailRegex","RegExp","test","length","handleSocialLogin","signInWithPopup","credential","accessToken","displayName","split","errorCode","code","errorMessage","handleLoginSubmit","signInWithEmailAndPassword","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { loginValidate, singupValidate } from '../validator/validate';\r\nimport { useRouter } from 'next/router';\r\nimport { auth, database, provider, functions } from '../firebase';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n\r\n    const [isLogin, setisLogin] = useState(false);\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const [signup, setSignup] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        password: '',\r\n        formErrors: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            password: '',\r\n        }\r\n    });\r\n\r\n    const [resetPassword, setResetPassword] = useState({\r\n        email: '',\r\n        formErrors: {\r\n            email: ''\r\n        }\r\n    });\r\n\r\n    const [login, setLogin] = useState({\r\n        email: '',\r\n        password: '',\r\n        formErrors: {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    });\r\n\r\n    const [authenticate, setAuthenticate] = useState(false);\r\n    const [authenticating, setAuthenticating] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const router = useRouter();\r\n    const [success, setSuccess] = useState({\r\n        message: '',\r\n        token: '',\r\n        user: {\r\n            email: '',\r\n            firstName: '',\r\n            fullName: '',\r\n            lastName: '',\r\n            role: '',\r\n            _id: ''\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            user == null ? setisLogin(false) : setisLogin(true);\r\n        })\r\n    }, [])\r\n\r\n    const handleLoginChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const { formErrors } = login;\r\n        loginValidate(name, value, formErrors);\r\n        let newLogin = {...login, [name]: value }\r\n        return setLogin(newLogin)\r\n    }\r\n\r\n    const handleSignupChange = (e) => {\r\n        const { formErrors } = {...signup }\r\n        const { name, value } = e.target;\r\n        singupValidate(name, value, formErrors)\r\n        let newSignup = {...signup, [name]: value }\r\n        return setSignup(newSignup)\r\n    }\r\n\r\n    const handleSignupSubmit = async(e) => {\r\n        e.preventDefault();\r\n        const { firstName, lastName, email, phoneNumber, password } = signup;\r\n        auth.createUserWithEmailAndPassword(email, password).then(cred => {\r\n            return database.collection('Profile').doc(cred.user.uid).set({\r\n                phoneNumber,\r\n                email,\r\n                firstName,\r\n                lastName\r\n            })\r\n        }).then(() => {\r\n            setisLogin(true);\r\n            router.replace('dashboard');\r\n        })\r\n    }\r\n\r\n    const handleAdminSignUp = (e) => {\r\n        e.preventDefault();\r\n        const { firstName, lastName, email, phoneNumber, password } = signup;\r\n\r\n        const body = {\r\n            email\r\n        }\r\n\r\n        const headers = {\r\n            'content-type': \"application/json\",\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n            'Access-Control-Allow-Methods': 'post',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Origin': 'https://us-central1-managerbran-2a699.cloudfunctions.net'\r\n        }\r\n\r\n        // fetch(`https://us-central1-managerbran-2a699.cloudfunctions.net/addAdminRole`, {\r\n        //     method: \"POST\",\r\n        //     headers,\r\n        //     body: JSON.stringify(body)\r\n        // }).catch(function(error) {\r\n        //     if (error.response) {\r\n        //         // The request was made and the server responded with a status code\r\n        //         // that falls out of the range of 2xx\r\n        //         console.log(error.response.data);\r\n        //         console.log(error.response.status);\r\n        //         console.log(error.response.headers);\r\n        //     } else if (error.request) {\r\n        //         // The request was made but no response was received\r\n        //         // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n        //         // http.ClientRequest in node.js\r\n        //         console.log(error.request);\r\n        //     } else {\r\n        //         // Something happened in setting up the request that triggered an Error\r\n        //         console.log('Error', error.message);\r\n        //     }\r\n        //     console.log(error.config);\r\n        // });\r\n        const addAdminRole = functions.httpsCallable('addAdminRole')\r\n        addAdminRole({email}).then(result => {\r\n          console.log(result)\r\n        });\r\n        auth.createUserWithEmailAndPassword(email, password).then(cred =>{\r\n          return database.collection('Profile').doc(cred.user.uid).set({\r\n            phoneNumber, email, firstName, lastName\r\n          })}\r\n        ).then((data)=>{\r\n            console.log(data);\r\n        //   setisLogin(true);\r\n        //   router.replace('dashboard');\r\n        } )\r\n    }\r\n\r\n    const handleSignout = (e) => {\r\n        e.preventDefault();\r\n        auth.signOut().then(() => {\r\n            // Sign-out successful.\r\n        }).catch((error) => {\r\n            // An error happened.\r\n        });\r\n    }\r\n    const passwordReset = (e) => {\r\n        e.preventDefault();\r\n        const { email } = resetPassword;\r\n        auth.sendPasswordResetEmail(email).then(() => {})\r\n            .catch((error) => {\r\n                setError(error.message);\r\n            })\r\n    }\r\n\r\n    const handlePasswordChange = (e) => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        const { formErrors } = resetPassword;\r\n        const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\n        formErrors.email = emailRegex.test(value) && value.length > 0 ? '' : '*input a valid email address*';\r\n        setResetPassword({...resetPassword, [name]: value });\r\n    }\r\n\r\n    const handleSocialLogin = (e) => {\r\n        e.preventDefault();\r\n        auth.signInWithPopup(provider).then((result) => {\r\n            /** @type {firebase.auth.OAuthCredential} */\r\n            var credential = result.credential;\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            var token = credential.accessToken;\r\n            // The signed-in user info.\r\n            var user = result.user;\r\n            let data = user.displayName.split(\" \");\r\n            let firstName = data[0];\r\n            let lastName = data[1];\r\n            let email = result.user.email;\r\n            user && (user.uid && setLogin(true));\r\n            return database.collection('Profile').doc(result.user.uid).set({\r\n                    firstName,\r\n                    lastName,\r\n                    email\r\n                })\r\n                // ...\r\n        }).catch((error) => {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n        });\r\n    }\r\n\r\n    const handleLoginSubmit = (e) => {\r\n        e.preventDefault();\r\n        setAuthenticating(true);\r\n        const { email, password } = login;\r\n        auth.signInWithEmailAndPassword(email, password).then(() => {\r\n            setisLogin(true);\r\n            router.replace('dashboard');\r\n        })\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{sessionToken, setSessionToken, passwordReset, resetPassword, handlePasswordChange, login, signup, isLogin, setisLogin, handleLoginChange, handleSocialLogin, handleSignupChange, handleAdminSignUp, handleSignout, handleSignupSubmit, handleLoginSubmit}}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}