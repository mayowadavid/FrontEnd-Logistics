{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"H:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\AuthContext.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from '../../helpers/axios';\nimport { loginValidate, singupValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nexport var AuthContext = /*#__PURE__*/createContext();\n\nvar AuthContextProvider = function AuthContextProvider(props) {\n  _s();\n\n  var _useState = useState(false),\n      isLogin = _useState[0],\n      setisLogin = _useState[1];\n\n  var _useState2 = useState(),\n      sessionToken = _useState2[0],\n      setSessionToken = _useState2[1];\n\n  var _useState3 = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    password: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      password: ''\n    }\n  }),\n      signup = _useState3[0],\n      setSignup = _useState3[1];\n\n  var _useState4 = useState(),\n      profile = _useState4[0],\n      setProfile = _useState4[1];\n\n  var _useState5 = useState({\n    email: '',\n    password: '',\n    formErrors: {\n      email: '',\n      password: ''\n    }\n  }),\n      login = _useState5[0],\n      setLogin = _useState5[1];\n\n  var _useState6 = useState(false),\n      authenticate = _useState6[0],\n      setAuthenticate = _useState6[1];\n\n  var _useState7 = useState(false),\n      authenticating = _useState7[0],\n      setAuthenticating = _useState7[1];\n\n  var _useState8 = useState(''),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var router = useRouter();\n\n  var _useState9 = useState({\n    message: '',\n    token: '',\n    user: {\n      email: '',\n      firstName: '',\n      fullName: '',\n      lastName: '',\n      role: '',\n      _id: ''\n    }\n  }),\n      success = _useState9[0],\n      setSuccess = _useState9[1]; //   const signout = async(e) => {\n  //     e.preventDefault();\n  //       const res = await axios.post('/signout').catch(function (error) {\n  //           if (error.response) {\n  //             // The request was made and the server responded with a status code\n  //             // that falls out of the range of 2xx\n  //             console.log(error.response.data);\n  //             console.log(error.response.status);\n  //             console.log(error.response.headers);\n  //           } else if (error.request) {\n  //             // The request was made but no response was received\n  //             // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n  //             // http.ClientRequest in node.js\n  //             console.log(error.request);\n  //           } else {\n  //             // Something happened in setting up the request that triggered an Error\n  //             console.log('Error', error.message);\n  //           }\n  //           console.log(error.config);\n  //         });\n  //       localStorage.clear();\n  //       router.replace('/login');\n  //   }\n  // const handleLoginChange = (e) => {\n  //     const {name, value} = e.target;\n  //     const{formErrors} = login;\n  //     loginValidate(name, value, formErrors);\n  //         let newLogin = { ...login, [name]: value }\n  //         return setLogin(newLogin)\n  // } \n  // const handleSignupChange = (e) => {\n  //     const{formErrors} = {...signup}\n  //     const {name, value} = e.target;\n  //     singupValidate(name, value, formErrors)\n  //         let newSignup = { ...signup, [name]: value }\n  //         return setSignup(newSignup)\n  // }\n  // const handleSignupSubmit = async(e) => {\n  //     e.preventDefault();\n  //     const res = await axios.post('/signup', signup).catch(function (error) {\n  //         if (error.response) {\n  //           // The request was made and the server responded with a status code\n  //           // that falls out of the range of 2xx\n  //           console.log(error.response.data);\n  //           console.log(error.response.status);\n  //           console.log(error.response.headers);\n  //         } else if (error.request) {\n  //           // The request was made but no response was received\n  //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n  //           // http.ClientRequest in node.js\n  //           console.log(error.request);\n  //         } else {\n  //           // Something happened in setting up the request that triggered an Error\n  //           console.log('Error', error.message);\n  //         }\n  //         console.log(error.config);\n  //       });\n  //       console.log(res.status);\n  //       res.status == 201 && (\n  //         router.replace('/dashboard'),\n  //         localStorage.setItem('token', res.data.token),\n  //         console.log(success)\n  //         );\n  //         console.log(res);\n  //   }; \n  //   const handleLoginSubmit = async(e) => {\n  //     e.preventDefault();\n  //     setAuthenticating(true);\n  //     const res = await axios.post('/signin', login).catch(function (error) {\n  //         if (error.response) {\n  //           // The request was made and the server responded with a status code\n  //           // that falls out of the range of 2xx\n  //           console.log(error.response.data);\n  //           console.log(error.response.status);\n  //           console.log(error.response.headers);\n  //         } else if (error.request) {\n  //           // The request was made but no response was received\n  //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n  //           // http.ClientRequest in node.js\n  //           console.log(error.request);\n  //         } else {\n  //           // Something happened in setting up the request that triggered an Error\n  //           console.log('Error', error.message);\n  //         }\n  //         console.log(error.config);\n  //       });\n  //   res.status == 200 && (\n  //         setAuthenticating(false),\n  //         setAuthenticate(true),\n  //         localStorage.setItem('token', res.data.token),\n  //         setisLogin(true),\n  //         router.replace('/dashboard'))\n  //   }; \n  //   const handleAdminSubmit = async(e) => {\n  //     e.preventDefault();\n  //     setAuthenticating(true);\n  //     const res = await axios.post('/admin/signin', login).catch(function (error) {\n  //         if (error.response) {\n  //           // The request was made and the server responded with a status code\n  //           // that falls out of the range of 2xx\n  //           console.log(error.response.data);\n  //           console.log(error.response.status);\n  //           console.log(error.response.headers);\n  //         } else if (error.request) {\n  //           // The request was made but no response was received\n  //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n  //           // http.ClientRequest in node.js\n  //           console.log(error.request);\n  //         } else {\n  //           // Something happened in setting up the request that triggered an Error\n  //           console.log('Error', error.message);\n  //         }\n  //         console.log(error.config);\n  //       });\n  //     console.log(res);\n  //     if(res.status === 200){\n  //         setAuthenticating(false);\n  //         setAuthenticate(true);\n  //         setisLogin(true)\n  //         const {token, user}= res.data;\n  //         localStorage.setItem('token', token);\n  //         let message = \"welcome\";\n  //         setSuccess({...success, message, token, user});\n  //         router.replace('/contact');\n  //         return console.log(success);\n  //     }\n  //   }; \n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      sessionToken: sessionToken,\n      signout: signout,\n      setSessionToken: setSessionToken,\n      login: login,\n      signup: signup,\n      isLogin: isLogin,\n      setisLogin: setisLogin,\n      handleLoginChange: handleLoginChange,\n      handleSignupChange: handleSignupChange,\n      handleSignupSubmit: handleSignupSubmit,\n      handleLoginSubmit: handleLoginSubmit,\n      handleAdminSubmit: handleAdminSubmit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(AuthContextProvider, \"zxrKEUsFZ2TyfdytW+7nGG6gz1I=\", false, function () {\n  return [useRouter];\n});\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["H:/G4 Logistics/FrontEnd/components/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","axios","loginValidate","singupValidate","useRouter","AuthContext","AuthContextProvider","props","isLogin","setisLogin","sessionToken","setSessionToken","firstName","lastName","email","phoneNumber","password","formErrors","signup","setSignup","profile","setProfile","login","setLogin","authenticate","setAuthenticate","authenticating","setAuthenticating","error","setError","router","message","token","user","fullName","role","_id","success","setSuccess","signout","handleLoginChange","handleSignupChange","handleSignupSubmit","handleLoginSubmit","handleAdminSubmit","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from '../../helpers/axios';\r\nimport { loginValidate, singupValidate } from '../validator/validate';\r\nimport {useRouter} from 'next/router';\r\n\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n\r\n    const [isLogin, setisLogin] = useState(false); \r\n    const [sessionToken, setSessionToken] = useState(); \r\n    const [signup, setSignup] = useState({\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      phoneNumber: '',\r\n      password: '',\r\n      formErrors: {\r\n          firstName: '',\r\n          lastName: '',\r\n          email: '',\r\n          phoneNumber: '',\r\n          password: '',\r\n      }\r\n    });\r\n    const [profile, setProfile] = useState();\r\n\r\n    const [login, setLogin] = useState({\r\n        email: '',\r\n        password: '',\r\n        formErrors: {\r\n            email: '',\r\n            password: ''\r\n        }\r\n      });\r\n\r\n      const [authenticate, setAuthenticate] = useState(false);\r\n      const [authenticating, setAuthenticating] = useState(false);\r\n      const [error, setError] = useState('');\r\n      const router = useRouter();\r\n      const [success, setSuccess] = useState({\r\n          message: '',\r\n          token: '',\r\n          user: {email: '',\r\n          firstName: '',\r\n          fullName: '',\r\n          lastName: '',\r\n          role: '',\r\n          _id: ''} \r\n      });\r\n\r\n    //   const signout = async(e) => {\r\n    //     e.preventDefault();\r\n    //       const res = await axios.post('/signout').catch(function (error) {\r\n    //           if (error.response) {\r\n    //             // The request was made and the server responded with a status code\r\n    //             // that falls out of the range of 2xx\r\n    //             console.log(error.response.data);\r\n    //             console.log(error.response.status);\r\n    //             console.log(error.response.headers);\r\n    //           } else if (error.request) {\r\n    //             // The request was made but no response was received\r\n    //             // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n    //             // http.ClientRequest in node.js\r\n    //             console.log(error.request);\r\n    //           } else {\r\n    //             // Something happened in setting up the request that triggered an Error\r\n    //             console.log('Error', error.message);\r\n    //           }\r\n    //           console.log(error.config);\r\n    //         });\r\n    //       localStorage.clear();\r\n         \r\n    //       router.replace('/login');\r\n    //   }\r\n\r\n    // const handleLoginChange = (e) => {\r\n    //     const {name, value} = e.target;\r\n    //     const{formErrors} = login;\r\n    //     loginValidate(name, value, formErrors);\r\n    //         let newLogin = { ...login, [name]: value }\r\n    //         return setLogin(newLogin)\r\n    // } \r\n\r\n    // const handleSignupChange = (e) => {\r\n    //     const{formErrors} = {...signup}\r\n    //     const {name, value} = e.target;\r\n    //     singupValidate(name, value, formErrors)\r\n    //         let newSignup = { ...signup, [name]: value }\r\n    //         return setSignup(newSignup)\r\n    // }\r\n\r\n\r\n    // const handleSignupSubmit = async(e) => {\r\n    //     e.preventDefault();\r\n    //     const res = await axios.post('/signup', signup).catch(function (error) {\r\n    //         if (error.response) {\r\n    //           // The request was made and the server responded with a status code\r\n    //           // that falls out of the range of 2xx\r\n    //           console.log(error.response.data);\r\n    //           console.log(error.response.status);\r\n    //           console.log(error.response.headers);\r\n    //         } else if (error.request) {\r\n    //           // The request was made but no response was received\r\n    //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n    //           // http.ClientRequest in node.js\r\n    //           console.log(error.request);\r\n    //         } else {\r\n    //           // Something happened in setting up the request that triggered an Error\r\n    //           console.log('Error', error.message);\r\n    //         }\r\n    //         console.log(error.config);\r\n    //       });\r\n    //       console.log(res.status);\r\n    //       res.status == 201 && (\r\n    //         router.replace('/dashboard'),\r\n    //         localStorage.setItem('token', res.data.token),\r\n    //         console.log(success)\r\n    //         );\r\n    //         console.log(res);\r\n    //   }; \r\n\r\n    //   const handleLoginSubmit = async(e) => {\r\n    //     e.preventDefault();\r\n    //     setAuthenticating(true);\r\n    //     const res = await axios.post('/signin', login).catch(function (error) {\r\n    //         if (error.response) {\r\n    //           // The request was made and the server responded with a status code\r\n    //           // that falls out of the range of 2xx\r\n    //           console.log(error.response.data);\r\n    //           console.log(error.response.status);\r\n    //           console.log(error.response.headers);\r\n    //         } else if (error.request) {\r\n    //           // The request was made but no response was received\r\n    //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n    //           // http.ClientRequest in node.js\r\n    //           console.log(error.request);\r\n    //         } else {\r\n    //           // Something happened in setting up the request that triggered an Error\r\n    //           console.log('Error', error.message);\r\n    //         }\r\n    //         console.log(error.config);\r\n    //       });\r\n    //   res.status == 200 && (\r\n    //         setAuthenticating(false),\r\n    //         setAuthenticate(true),\r\n    //         localStorage.setItem('token', res.data.token),\r\n    //         setisLogin(true),\r\n    //         router.replace('/dashboard'))\r\n        \r\n\r\n    //   }; \r\n      \r\n    //   const handleAdminSubmit = async(e) => {\r\n    //     e.preventDefault();\r\n    //     setAuthenticating(true);\r\n    //     const res = await axios.post('/admin/signin', login).catch(function (error) {\r\n    //         if (error.response) {\r\n    //           // The request was made and the server responded with a status code\r\n    //           // that falls out of the range of 2xx\r\n    //           console.log(error.response.data);\r\n    //           console.log(error.response.status);\r\n    //           console.log(error.response.headers);\r\n    //         } else if (error.request) {\r\n    //           // The request was made but no response was received\r\n    //           // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n    //           // http.ClientRequest in node.js\r\n    //           console.log(error.request);\r\n    //         } else {\r\n    //           // Something happened in setting up the request that triggered an Error\r\n    //           console.log('Error', error.message);\r\n    //         }\r\n    //         console.log(error.config);\r\n    //       });\r\n    //     console.log(res);\r\n    //     if(res.status === 200){\r\n    //         setAuthenticating(false);\r\n    //         setAuthenticate(true);\r\n    //         setisLogin(true)\r\n    //         const {token, user}= res.data;\r\n    //         localStorage.setItem('token', token);\r\n    //         let message = \"welcome\";\r\n    //         setSuccess({...success, message, token, user});\r\n    //         router.replace('/contact');\r\n    //         return console.log(success);\r\n    //     }\r\n    //   }; \r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{sessionToken, signout, setSessionToken, login, signup, isLogin, setisLogin, handleLoginChange, handleSignupChange, handleSignupSubmit, handleLoginSubmit, handleAdminSubmit}}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}