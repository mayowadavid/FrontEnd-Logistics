{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"H:/G4 Logistics/FrontEnd/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"H:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\fireBase\\\\ProgressBar.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { motion } from 'framer-motion';\nimport { store } from '../firebase';\n\nvar ProgressBar = function ProgressBar(_ref) {\n  _s();\n\n  var image = _ref.image,\n      setImage = _ref.setImage;\n\n  var _useState = useState(0),\n      progress = _useState[0],\n      setProgress = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState([]),\n      url = _useState3[0],\n      setUrl = _useState3[1]; // useEffect(() => {\n  //   // references\n  //   const storageRef = store.ref(`profileimages/${image.name}`);\n  //   storageRef.put(image).on('state_changed', \n  //    async (snap) => {\n  //     const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\n  //    await setProgress( snap._delegate.bytesTransferred);\n  //   },  async (err) => {\n  //    await setError(err);\n  //   }, async () => {\n  //     const newUrl = await storageRef.getDownloadURL();\n  //    await setUrl([...url, {newUrl}]);\n  //   });\n  // }, [image]);  \n\n\n  useEffect(function () {\n    // references\n    if (image.length !== url.length) {\n      image.map(img, function (i) {\n        return setUrl([].concat(_toConsumableArray(url), [{\n          img: img\n        }]));\n      });\n    }\n  }, [image]);\n  console.log(url);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"progress-bar\",\n    initial: {\n      width: 0\n    },\n    animate: {\n      width: progress + '%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ProgressBar, \"PtRF75/NaYmDoBxPAuoWE+xt/JQ=\");\n\n_c = ProgressBar;\nexport default ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["H:/G4 Logistics/FrontEnd/components/fireBase/ProgressBar.js"],"names":["React","useState","useEffect","useContext","motion","store","ProgressBar","image","setImage","progress","setProgress","error","setError","url","setUrl","length","map","img","i","console","log","width"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAAQC,KAAR,QAAoB,aAApB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAyB;AAAA;;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACXP,QAAQ,CAAC,CAAD,CADG;AAAA,MACpCQ,QADoC;AAAA,MAC1BC,WAD0B;;AAAA,mBAEjBT,QAAQ,CAAC,IAAD,CAFS;AAAA,MAEpCU,KAFoC;AAAA,MAE7BC,QAF6B;;AAAA,mBAGrBX,QAAQ,CAAC,EAAD,CAHa;AAAA,MAGpCY,GAHoC;AAAA,MAG/BC,MAH+B,kBAQ3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAGK,KAAK,CAACQ,MAAN,KAAiBF,GAAG,CAACE,MAAxB,EAA+B;AAC7BR,MAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,EAAe,UAAAC,CAAC;AAAA,eACfJ,MAAM,8BAAKD,GAAL,IAAU;AAACI,UAAAA,GAAG,EAAHA;AAAD,SAAV,GADS;AAAA,OAAhB;AAGD;AACF,GAPQ,EAON,CAACV,KAAD,CAPM,CAAT;AASFY,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AAIE,sBACE,QAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,SAAS,EAAC,cAAtB;AACE,IAAA,OAAO,EAAE;AAAEQ,MAAAA,KAAK,EAAE;AAAT,KADX;AAEE,IAAA,OAAO,EAAE;AAAEA,MAAAA,KAAK,EAAEZ,QAAQ,GAAG;AAApB;AAFX;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,CA1CD;;GAAMH,W;;KAAAA,W;AA4CN,eAAeA,WAAf","sourcesContent":["import React, {  useState, useEffect, useContext } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {store} from '../firebase';\r\n\r\n\r\nconst ProgressBar = ({ image, setImage }) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState([]);\r\n  \r\n    \r\n   \r\n\r\n  // useEffect(() => {\r\n  //   // references\r\n  //   const storageRef = store.ref(`profileimages/${image.name}`);\r\n  //   storageRef.put(image).on('state_changed', \r\n  //    async (snap) => {\r\n  //     const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n  //    await setProgress( snap._delegate.bytesTransferred);\r\n  //   },  async (err) => {\r\n  //    await setError(err);\r\n  //   }, async () => {\r\n  //     const newUrl = await storageRef.getDownloadURL();\r\n  //    await setUrl([...url, {newUrl}]);\r\n  //   });\r\n  // }, [image]);  \r\n\r\n  useEffect(() => {\r\n    // references\r\n    if(image.length !== url.length){\r\n      image.map(img, i =>(\r\n       setUrl([...url, {img}]))\r\n      )\r\n    }\r\n  }, [image]);\r\n\r\nconsole.log(url);\r\n      \r\n \r\n\r\n  return (\r\n    <motion.div className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + '%' }}\r\n    ></motion.div>\r\n  );\r\n} \r\n\r\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}