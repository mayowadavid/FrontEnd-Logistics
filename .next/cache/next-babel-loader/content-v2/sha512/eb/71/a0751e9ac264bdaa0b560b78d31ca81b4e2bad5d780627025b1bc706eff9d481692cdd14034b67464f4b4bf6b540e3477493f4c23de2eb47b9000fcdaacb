{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"H:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\fireBase\\\\ProgressBar.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { motion } from 'framer-motion';\nimport { store } from '../firebase';\n\nconst ProgressBar = ({\n  image,\n  setImage\n}) => {\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: url,\n    1: setUrl\n  } = useState([]); // useEffect(() => {\n  //   // references\n  //   const storageRef = store.ref(`profileimages/${image.name}`);\n  //   storageRef.put(image).on('state_changed', \n  //    async (snap) => {\n  //     const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\n  //    await setProgress( snap._delegate.bytesTransferred);\n  //   },  async (err) => {\n  //    await setError(err);\n  //   }, async () => {\n  //     const newUrl = await storageRef.getDownloadURL();\n  //    await setUrl([...url, {newUrl}]);\n  //   });\n  // }, [image]);  \n\n  useEffect(() => {\n    // references\n    if (image.length !== url.length) {\n      image.map(img, i => setUrl([...url, {\n        img\n      }]));\n    }\n  }, [image]);\n  console.log(url);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"progress-bar\",\n    initial: {\n      width: 0\n    },\n    animate: {\n      width: progress + '%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["H:/G4 Logistics/FrontEnd/components/fireBase/ProgressBar.js"],"names":["React","useState","useEffect","useContext","motion","store","ProgressBar","image","setImage","progress","setProgress","error","setError","url","setUrl","length","map","img","i","console","log","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAAQC,KAAR,QAAoB,aAApB;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAC3C,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM;AAAA,OAACU,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAA,OAACY,GAAD;AAAA,OAAMC;AAAN,MAAgBb,QAAQ,CAAC,EAAD,CAA9B,CAH2C,CAQ3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAGK,KAAK,CAACQ,MAAN,KAAiBF,GAAG,CAACE,MAAxB,EAA+B;AAC7BR,MAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,EAAeC,CAAC,IACfJ,MAAM,CAAC,CAAC,GAAGD,GAAJ,EAAS;AAACI,QAAAA;AAAD,OAAT,CAAD,CADP;AAGD;AACF,GAPQ,EAON,CAACV,KAAD,CAPM,CAAT;AASFY,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AAIE,sBACE,QAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,SAAS,EAAC,cAAtB;AACE,IAAA,OAAO,EAAE;AAAEQ,MAAAA,KAAK,EAAE;AAAT,KADX;AAEE,IAAA,OAAO,EAAE;AAAEA,MAAAA,KAAK,EAAEZ,QAAQ,GAAG;AAApB;AAFX;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA1CD;;AA4CA,eAAeH,WAAf","sourcesContent":["import React, {  useState, useEffect, useContext } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {store} from '../firebase';\r\n\r\n\r\nconst ProgressBar = ({ image, setImage }) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState([]);\r\n  \r\n    \r\n   \r\n\r\n  // useEffect(() => {\r\n  //   // references\r\n  //   const storageRef = store.ref(`profileimages/${image.name}`);\r\n  //   storageRef.put(image).on('state_changed', \r\n  //    async (snap) => {\r\n  //     const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n  //    await setProgress( snap._delegate.bytesTransferred);\r\n  //   },  async (err) => {\r\n  //    await setError(err);\r\n  //   }, async () => {\r\n  //     const newUrl = await storageRef.getDownloadURL();\r\n  //    await setUrl([...url, {newUrl}]);\r\n  //   });\r\n  // }, [image]);  \r\n\r\n  useEffect(() => {\r\n    // references\r\n    if(image.length !== url.length){\r\n      image.map(img, i =>(\r\n       setUrl([...url, {img}]))\r\n      )\r\n    }\r\n  }, [image]);\r\n\r\nconsole.log(url);\r\n      \r\n \r\n\r\n  return (\r\n    <motion.div className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + '%' }}\r\n    ></motion.div>\r\n  );\r\n} \r\n\r\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}