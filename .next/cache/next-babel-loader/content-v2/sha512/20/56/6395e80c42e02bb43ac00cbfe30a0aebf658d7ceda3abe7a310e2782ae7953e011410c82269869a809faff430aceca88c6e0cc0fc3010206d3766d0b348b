{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\RequestContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { gallery, message, offBack, contact } from \"../../svg\";\nimport { requestValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nimport { auth, store, database, timestamp } from '../firebase';\nexport const RequestContext = /*#__PURE__*/createContext();\n\nconst RequestContextProvider = props => {\n  const initialState = {\n    cartons: \"\",\n    deliveryLocations: \"\",\n    descriptions: \"\",\n    itemsWorth: \"\",\n    receiverFirstName: '',\n    receiverPhoneNumber1: '',\n    receiverPhoneNumber2: '',\n    requestImages: [],\n    senderFirstName: '',\n    senderPhoneNumber1: '',\n    senderPhoneNumber2: '',\n    tagName: \"\",\n    otherItems: false,\n    formErrors: {\n      senderFirstName: '',\n      senderPhoneNumber1: '',\n      senderPhoneNumber2: '',\n      receiverFirstName: '',\n      receiverPhoneNumber1: '',\n      receiverPhoneNumber2: '',\n      cartons: '',\n      createdAt: '',\n      deliveryLocations: '',\n      descriptions: '',\n      itemsWorth: '',\n      otherItems: true,\n      status: '',\n      tagName: '',\n      amount: ''\n    }\n  };\n  const {\n    0: input,\n    1: setInput\n  } = useState(initialState);\n  const {\n    0: contacts,\n    1: setContacts\n  } = useState([]);\n  const {\n    0: extractedRequest,\n    1: setExtractedRequest\n  } = useState();\n  const {\n    0: sessionToken,\n    1: setSessionToken\n  } = useState();\n  const {\n    0: isLogin,\n    1: setisLogin\n  } = useState(false);\n  const {\n    0: temporaryImage,\n    1: setTemporaryImage\n  } = useState([]);\n  const {\n    0: requestImages,\n    1: setRequestImages\n  } = useState([]);\n  const {\n    0: count,\n    1: setCount\n  } = useState();\n  const {\n    0: form,\n    1: setForm\n  } = useState();\n  const {\n    0: requestSuccess,\n    1: setRequestSuccess\n  } = useState(false);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: userId,\n    1: setUserId\n  } = useState('');\n  const {\n    0: transaction,\n    1: setTransaction\n  } = useState([]);\n  const {\n    0: transactionInst,\n    1: setTransactionInst\n  } = useState();\n  const {\n    0: galleryImage,\n    1: setGalleryImage\n  } = useState([]);\n  const router = useRouter();\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      const data = [];\n      user !== null && database.collection('Requests').where('userId', '==', user.uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshots\n          let {\n            tagName,\n            createdAt,\n            status,\n            amount\n          } = doc.data();\n          let id = doc.id;\n          data.push({\n            tagName,\n            createdAt,\n            status,\n            amount,\n            id\n          });\n        });\n      });\n      setTransaction(data);\n    });\n  }, []);\n  useEffect(() => {\n    transactionInst !== undefined && setTransaction([...transaction, transactionInst]);\n  }, [transactionInst]);\n\n  const handleChange = e => {\n    if (e) {\n      e.preventDefault();\n      const {\n        name,\n        value,\n        id\n      } = e.target;\n\n      const {\n        formErrors\n      } = _objectSpread({}, input);\n\n      requestValidate(id, value, formErrors);\n\n      const newInput = _objectSpread(_objectSpread({}, input), {}, {\n        [name]: value\n      });\n\n      return setInput(newInput);\n    }\n  };\n\n  const handleCheck = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n\n    const newInput = _objectSpread(_objectSpread({}, input), {}, {\n      [name]: checked\n    });\n\n    return setInput(newInput);\n  };\n\n  useEffect(() => {\n    progress == 100 && setLoading(false);\n    setProgress(0);\n  }, [progress]);\n  useEffect(() => {\n    router.prefetch('/transaction');\n  }, []);\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user !== null && setUserId(user.uid);\n    });\n  }, []);\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user !== null && store.ref().child('/requestImages').listAll().then(function (result) {\n        result.items.forEach(function (imageRef) {\n          getImageUrl(imageRef);\n        });\n      });\n    });\n    let img = [];\n\n    const getImageUrl = images => {\n      images.getDownloadURL().then(url => {\n        img.push(url);\n      });\n    };\n\n    setGalleryImage(img);\n  }, []);\n  console.log(galleryImage);\n\n  const photoChange = e => {\n    e.preventDefault();\n\n    if (e.target.files) {\n      progress !== 100 && setLoading(true);\n      let selected = e.target.files[0];\n      let types = ['image/jpeg', 'image/png'];\n      let fileType = selected !== undefined ? types.includes(selected.type) : setError(\"unsupported image type* accepted image jpg/png\");\n      let FileSize = \"5000000\";\n      let filteredImageSize = fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\");\n      let perfectSize = filteredImageSize == true && URL.createObjectURL(selected);\n      let restructureUrl = {\n        imageSource: perfectSize\n      };\n      perfectSize !== undefined && setTemporaryImage([...temporaryImage, restructureUrl]);\n\n      if (filteredImageSize == true) {\n        const storageRef = store.ref(`requestImages/${selected.name}`);\n        storageRef.put(selected).on('state_changed', async snap => {\n          const newPercentage = (await (snap.bytesTransferred / snap.totalBytes)) * 100;\n          await setProgress(newPercentage);\n        }, async err => {\n          await setError(err);\n        }, async () => {\n          const cloudUrl = await storageRef.getDownloadURL();\n          setRequestImages([...requestImages, {\n            cloudUrl\n          }]);\n        });\n      }\n\n      URL.revokeObjectURL(selected);\n    }\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    const {\n      cartons,\n      deliveryLocations,\n      descriptions,\n      itemsWorth,\n      receiverFirstName,\n      receiverPhoneNumber1,\n      receiverPhoneNumber2,\n      requestImages,\n      senderFirstName,\n      senderPhoneNumber1,\n      senderPhoneNumber2,\n      tagName,\n      otherItems\n    } = input;\n    setTransactionInst({\n      tagName,\n      status: \"pending\",\n      amount: \"\",\n      id: \"hkaj$5%^gxn*8nk\"\n    });\n    userId !== null && database.collection('Requests').add({\n      userId,\n      cartons,\n      deliveryLocations,\n      descriptions,\n      itemsWorth,\n      receiverFirstName,\n      receiverPhoneNumber1,\n      receiverPhoneNumber2,\n      requestImages,\n      senderFirstName,\n      senderPhoneNumber1,\n      senderPhoneNumber2,\n      tagName,\n      otherItems,\n      status: \"pending\",\n      createdAt: timestamp()\n    }).then(data => {\n      data && (setRequestSuccess(true), setInput(initialState));\n    }).catch(error => {\n      setError(error);\n    });\n  };\n\n  const handleRequestUpdate = async (e, id) => {\n    e.preventDefault();\n    setInput(...input, requestImages);\n  };\n\n  const handleFormPreview = e => {\n    e.preventDefault();\n    setInput(_objectSpread(_objectSpread({}, input), {}, {\n      requestImages\n    }));\n    setCount(\"active\");\n  };\n\n  const selector = [{\n    content: \"contact\",\n    icon: contact(),\n    title: \"Contact\",\n    id: 1\n  }, {\n    content: \"gallery\",\n    icon: gallery(),\n    title: \"Gallery\",\n    id: 2\n  }, {\n    content: \"ShippingRequest\",\n    icon: offBack(),\n    title: \"Request\",\n    id: 3\n  }, {\n    content: \"\",\n    icon: message(),\n    title: \"Message\",\n    id: 4\n  }];\n  return /*#__PURE__*/_jsxDEV(RequestContext.Provider, {\n    value: {\n      galleryImage,\n      transaction,\n      setTransaction,\n      transactionInst,\n      input,\n      error,\n      loading,\n      setRequestImages,\n      requestImages,\n      requestSuccess,\n      setRequestSuccess,\n      initialState,\n      setCount,\n      count,\n      setInput,\n      handleChange,\n      handleCheck,\n      temporaryImage,\n      handleFormSubmit,\n      handleFormPreview,\n      photoChange,\n      selector,\n      setExtractedRequest,\n      extractedRequest,\n      contacts,\n      setContacts,\n      handleRequestUpdate,\n      sessionToken,\n      isLogin,\n      setisLogin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RequestContextProvider;","map":{"version":3,"sources":["G:/G4 Logistics/FrontEnd/components/context/RequestContext.js"],"names":["React","createContext","useEffect","useState","gallery","message","offBack","contact","requestValidate","useRouter","auth","store","database","timestamp","RequestContext","RequestContextProvider","props","initialState","cartons","deliveryLocations","descriptions","itemsWorth","receiverFirstName","receiverPhoneNumber1","receiverPhoneNumber2","requestImages","senderFirstName","senderPhoneNumber1","senderPhoneNumber2","tagName","otherItems","formErrors","createdAt","status","amount","input","setInput","contacts","setContacts","extractedRequest","setExtractedRequest","sessionToken","setSessionToken","isLogin","setisLogin","temporaryImage","setTemporaryImage","setRequestImages","count","setCount","form","setForm","requestSuccess","setRequestSuccess","progress","setProgress","error","setError","loading","setLoading","userId","setUserId","transaction","setTransaction","transactionInst","setTransactionInst","galleryImage","setGalleryImage","router","onAuthStateChanged","user","data","collection","where","uid","get","then","querySnapshot","forEach","doc","id","push","undefined","handleChange","e","preventDefault","name","value","target","newInput","handleCheck","checked","prefetch","ref","child","listAll","result","items","imageRef","getImageUrl","img","images","getDownloadURL","url","console","log","photoChange","files","selected","types","fileType","includes","type","FileSize","filteredImageSize","size","perfectSize","URL","createObjectURL","restructureUrl","imageSource","storageRef","put","on","snap","newPercentage","bytesTransferred","totalBytes","err","cloudUrl","revokeObjectURL","handleFormSubmit","add","catch","handleRequestUpdate","handleFormPreview","selector","content","icon","title","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\nimport { gallery, message, offBack, contact } from \"../../svg\";\r\nimport { requestValidate } from '../validator/validate';\r\nimport { useRouter } from 'next/router';\r\nimport { auth, store, database, timestamp } from '../firebase';\r\n\r\nexport const RequestContext = createContext();\r\n\r\nconst RequestContextProvider = (props) => {\r\n\r\n    const initialState = {\r\n        cartons: \"\",\r\n        deliveryLocations: \"\",\r\n        descriptions: \"\",\r\n        itemsWorth: \"\",\r\n        receiverFirstName: '',\r\n        receiverPhoneNumber1: '',\r\n        receiverPhoneNumber2: '',\r\n        requestImages: [],\r\n        senderFirstName: '',\r\n        senderPhoneNumber1: '',\r\n        senderPhoneNumber2: '',\r\n        tagName: \"\",\r\n        otherItems: false,\r\n        formErrors: {\r\n            senderFirstName: '',\r\n            senderPhoneNumber1: '',\r\n            senderPhoneNumber2: '',\r\n            receiverFirstName: '',\r\n            receiverPhoneNumber1: '',\r\n            receiverPhoneNumber2: '',\r\n            cartons: '',\r\n            createdAt: '',\r\n            deliveryLocations: '',\r\n            descriptions: '',\r\n            itemsWorth: '',\r\n            otherItems: true,\r\n            status: '',\r\n            tagName: '',\r\n            amount: ''\r\n        }\r\n    };\r\n\r\n    const [input, setInput] = useState(initialState);\r\n    const [contacts, setContacts] = useState([]);\r\n    const [extractedRequest, setExtractedRequest] = useState();\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const [isLogin, setisLogin] = useState(false);\r\n    const [temporaryImage, setTemporaryImage] = useState([]);\r\n    const [requestImages, setRequestImages] = useState([]);\r\n    const [count, setCount] = useState();\r\n    const [form, setForm] = useState();\r\n    const [requestSuccess, setRequestSuccess] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [userId, setUserId] = useState('');\r\n    const [transaction, setTransaction] = useState([]);\r\n    const [transactionInst, setTransactionInst] = useState();\r\n    const [galleryImage, setGalleryImage]= useState([]);\r\n    \r\n    const router = useRouter();\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        auth.onAuthStateChanged(user => {\r\n            const data = [];\r\n            user !== null && database.collection('Requests')\r\n                .where('userId', '==', user.uid)\r\n                .get().then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        // doc.data() is never undefined for query doc snapshots\r\n                        let { tagName, createdAt, status, amount } = doc.data();\r\n                        let id = doc.id;\r\n                        data.push({ tagName, createdAt, status, amount, id })\r\n                    });\r\n                });\r\n            setTransaction(data);\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        transactionInst !== undefined && (setTransaction([...transaction, transactionInst]));\r\n    }, [transactionInst])\r\n\r\n    const handleChange = (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            const { name, value, id } = e.target;\r\n            const { formErrors } = {...input };\r\n            requestValidate(id, value, formErrors);\r\n            const newInput = {...input, [name]: value };\r\n            return setInput(newInput);\r\n        }\r\n    };\r\n    const handleCheck = (e) => {\r\n        const { name, checked } = e.target;\r\n        const newInput = {...input, [name]: checked };\r\n        return setInput(newInput);\r\n    }\r\n    useEffect(() => {\r\n        progress == 100 && setLoading(false);\r\n        setProgress(0);\r\n    }, [progress])\r\n\r\n    useEffect(() => {\r\n        router.prefetch('/transaction')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            user !== null && setUserId(user.uid)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            user !== null && (store.ref().child('/requestImages').listAll().then(function(result){\r\n                result.items.forEach(function(imageRef){\r\n                   getImageUrl( imageRef)\r\n                })\r\n            }))\r\n        })\r\n        let img = [];\r\n         const getImageUrl = ( images) => {\r\n        images.getDownloadURL().then((url)=>{\r\n            img.push(url);\r\n        })\r\n    }\r\n    setGalleryImage(img);\r\n    }, [])\r\n    \r\n    console.log(galleryImage);\r\n\r\n    const photoChange = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (e.target.files) {\r\n            progress !== 100 && setLoading(true)\r\n            let selected = e.target.files[0];\r\n            let types = ['image/jpeg', 'image/png'];\r\n            let fileType = selected !== undefined ? types.includes(selected.type) : setError(\"unsupported image type* accepted image jpg/png\");\r\n            let FileSize = \"5000000\";\r\n            let filteredImageSize = fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\");\r\n            let perfectSize = filteredImageSize == true && (URL.createObjectURL(selected));\r\n            let restructureUrl = { imageSource: perfectSize }\r\n            perfectSize !== undefined && setTemporaryImage([...temporaryImage, restructureUrl]);\r\n            if (filteredImageSize == true) {\r\n                const storageRef = store.ref(`requestImages/${selected.name}`);\r\n                storageRef.put(selected).on('state_changed',\r\n                    async(snap) => {\r\n                        const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n                        await setProgress(newPercentage);\r\n                    }, async(err) => {\r\n                        await setError(err);\r\n                    }, async() => {\r\n                        const cloudUrl = await storageRef.getDownloadURL();\r\n                        setRequestImages([...requestImages, { cloudUrl }]);\r\n                    });\r\n            }\r\n            URL.revokeObjectURL(selected);\r\n        }\r\n    };\r\n\r\n\r\n    const handleFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n        const {\r\n            cartons,\r\n            deliveryLocations,\r\n            descriptions,\r\n            itemsWorth,\r\n            receiverFirstName,\r\n            receiverPhoneNumber1,\r\n            receiverPhoneNumber2,\r\n            requestImages,\r\n            senderFirstName,\r\n            senderPhoneNumber1,\r\n            senderPhoneNumber2,\r\n            tagName,\r\n            otherItems\r\n        } = input;\r\n\r\n        setTransactionInst({ tagName, status: \"pending\", amount: \"\", id: \"hkaj$5%^gxn*8nk\" });\r\n        userId !== null && database.collection('Requests').add({\r\n                userId,\r\n                cartons,\r\n                deliveryLocations,\r\n                descriptions,\r\n                itemsWorth,\r\n                receiverFirstName,\r\n                receiverPhoneNumber1,\r\n                receiverPhoneNumber2,\r\n                requestImages,\r\n                senderFirstName,\r\n                senderPhoneNumber1,\r\n                senderPhoneNumber2,\r\n                tagName,\r\n                otherItems,\r\n                status: \"pending\",\r\n                createdAt: timestamp()\r\n            })\r\n            .then((data) => {\r\n                data && (setRequestSuccess(true),\r\n                    setInput(initialState)\r\n                );\r\n            })\r\n            .catch(\r\n                (error) => {\r\n                    setError(error)\r\n                }\r\n            )\r\n    };\r\n\r\n\r\n    const handleRequestUpdate = async(e, id) => {\r\n        e.preventDefault();\r\n        setInput(...input, requestImages)\r\n    }\r\n\r\n    const handleFormPreview = (e) => {\r\n        e.preventDefault();\r\n        setInput({...input, requestImages });\r\n        setCount(\"active\");\r\n    }\r\n\r\n\r\n    const selector = [\r\n        { content: \"contact\", icon: contact(), title: \"Contact\", id: 1 },\r\n        { content: \"gallery\", icon: gallery(), title: \"Gallery\", id: 2 },\r\n        { content: \"ShippingRequest\", icon: offBack(), title: \"Request\", id: 3 },\r\n        { content: \"\", icon: message(), title: \"Message\", id: 4 }\r\n    ]\r\n\r\n\r\n    return ( \r\n        <RequestContext.Provider value = {{galleryImage, transaction, setTransaction, transactionInst, input, error, loading, setRequestImages, requestImages, requestSuccess, setRequestSuccess, initialState, setCount, count, setInput, handleChange, handleCheck, temporaryImage, handleFormSubmit, handleFormPreview, photoChange, selector, setExtractedRequest, extractedRequest, contacts, setContacts, handleRequestUpdate, sessionToken, isLogin, setisLogin } } > \r\n            { props.children } \r\n        </RequestContext.Provider>\r\n    )\r\n}\r\n\r\nexport default RequestContextProvider;"]},"metadata":{},"sourceType":"module"}