{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\AuthContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { singupValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nimport { auth, database, provider, functions } from '../firebase';\nimport { RequestContext } from '../context/RequestContext';\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthContextProvider = props => {\n  const {\n    setTransaction\n  } = useContext(RequestContext);\n  const {\n    0: isLogin,\n    1: setisLogin\n  } = useState(false);\n  const {\n    0: isAdmin,\n    1: setisAdmin\n  } = useState(false);\n  const {\n    0: sessionToken,\n    1: setSessionToken\n  } = useState();\n  const {\n    0: userError,\n    1: setUserError\n  } = useState('');\n  const {\n    0: signup,\n    1: setSignup\n  } = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    password: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      password: ''\n    }\n  });\n  const {\n    0: resetPassword,\n    1: setResetPassword\n  } = useState({\n    email: '',\n    formErrors: {\n      email: ''\n    }\n  });\n  const {\n    0: login,\n    1: setLogin\n  } = useState({\n    email: '',\n    password: '',\n    formErrors: {\n      email: '',\n      password: ''\n    }\n  });\n  const {\n    0: authenticating,\n    1: setAuthenticating\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const router = useRouter();\n  const {\n    0: success,\n    1: setSuccess\n  } = useState({\n    message: '',\n    token: '',\n    user: {\n      email: '',\n      firstName: '',\n      fullName: '',\n      lastName: '',\n      role: '',\n      _id: ''\n    }\n  });\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user == null ? setisLogin(false) : setisLogin(true);\n\n      if (user) {\n        user.getIdTokenResult().then(idTokenResult => {\n          idTokenResult.claims.admin == true ? setisAdmin(true) : setisAdmin(false);\n        });\n      }\n    });\n  }, []);\n\n  const handleLoginChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    let newLogin = _objectSpread(_objectSpread({}, login), {}, {\n      [name]: value\n    });\n\n    return setLogin(newLogin);\n  };\n\n  const handleSignupChange = e => {\n    const {\n      formErrors\n    } = _objectSpread({}, signup);\n\n    const {\n      name,\n      value\n    } = e.target;\n    singupValidate(name, value, formErrors);\n\n    let newSignup = _objectSpread(_objectSpread({}, signup), {}, {\n      [name]: value\n    });\n\n    return setSignup(newSignup);\n  };\n\n  const handleSignupSubmit = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\n      return database.collection('Profile').doc(cred.user.uid).set({\n        phoneNumber,\n        email,\n        firstName,\n        lastName\n      });\n    }).then(() => {\n      setisLogin(true);\n      router.replace('dashboard');\n    });\n  };\n\n  const handleAdminSignUp = e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password\n    } = signup;\n    const addAdminRole = functions.httpsCallable('addAdminRole');\n    addAdminRole({\n      email\n    }).then(result => {\n      console.log(result);\n    });\n  };\n\n  const handleSignout = e => {\n    e.preventDefault();\n    auth.signOut().then(() => {\n      setTransaction([]); // Sign-out successful.\n    }).catch(error => {// An error happened.\n    });\n  };\n\n  const passwordReset = e => {\n    e.preventDefault();\n    const {\n      email\n    } = resetPassword;\n    console.log(email);\n    auth.sendPasswordResetEmail(email).then(() => {}).catch(error => {\n      setError(error.message);\n    });\n  };\n\n  const handlePasswordChange = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      formErrors\n    } = resetPassword;\n    const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\n    formErrors.email = emailRegex.test(value) && value.length > 0 ? '' : '*input a valid email address*';\n    setResetPassword(_objectSpread(_objectSpread({}, resetPassword), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleSocialLogin = e => {\n    provider.addScope('profile');\n    provider.addScope('email');\n    auth.signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user;\n      let data = user.displayName.split(\" \");\n      let firstName = data[0];\n      let lastName = data[1];\n      let email = result.user.email;\n      user && user.uid && setLogin(true);\n      user && user.uid && router.replace('dashboard');\n      return database.collection('Profile').doc(result.user.uid).set({\n        firstName,\n        lastName,\n        email\n      }); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n    });\n  };\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    setAuthenticating(true);\n    const {\n      email,\n      password\n    } = login;\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      var user = result.user;\n      user && user.uid && setLogin(true);\n      user && user.uid && router.replace('dashboard');\n      user && user.uid && setAuthenticating(false);\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      setUserError(errorMessage);\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n    });\n  };\n\n  const handleAdminLogin = e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = login;\n    auth.signInWithEmailAndPassword(email, password).then(() => {\n      setisAdmin(true);\n      router.replace('contact');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      userError,\n      authenticating,\n      sessionToken,\n      setSessionToken,\n      passwordReset,\n      resetPassword,\n      handlePasswordChange,\n      login,\n      signup,\n      isLogin,\n      isAdmin,\n      setisLogin,\n      handleLoginChange,\n      handleSocialLogin,\n      handleSignupChange,\n      handleAdminSignUp,\n      handleSignout,\n      handleSignupSubmit,\n      handleLoginSubmit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["G:/G4 Logistics/FrontEnd/components/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","useContext","singupValidate","useRouter","auth","database","provider","functions","RequestContext","AuthContext","AuthContextProvider","props","setTransaction","isLogin","setisLogin","isAdmin","setisAdmin","sessionToken","setSessionToken","userError","setUserError","signup","setSignup","firstName","lastName","email","phoneNumber","password","formErrors","resetPassword","setResetPassword","login","setLogin","authenticating","setAuthenticating","error","setError","router","success","setSuccess","message","token","user","fullName","role","_id","onAuthStateChanged","getIdTokenResult","then","idTokenResult","claims","admin","handleLoginChange","e","name","value","target","newLogin","handleSignupChange","newSignup","handleSignupSubmit","preventDefault","createUserWithEmailAndPassword","cred","collection","doc","uid","set","replace","handleAdminSignUp","addAdminRole","httpsCallable","result","console","log","handleSignout","signOut","catch","passwordReset","sendPasswordResetEmail","handlePasswordChange","emailRegex","RegExp","test","length","handleSocialLogin","addScope","signInWithPopup","credential","accessToken","data","displayName","split","errorCode","code","errorMessage","handleLoginSubmit","signInWithEmailAndPassword","handleAdminLogin","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { singupValidate } from '../validator/validate';\r\nimport { useRouter } from 'next/router';\r\nimport { auth, database, provider, functions } from '../firebase';\r\nimport {RequestContext} from '../context/RequestContext';\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n    const {setTransaction} = useContext(RequestContext);\r\n    const [isLogin, setisLogin] = useState(false);\r\n    const [isAdmin, setisAdmin] = useState(false);\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const [userError, setUserError] = useState('');\r\n    const [signup, setSignup] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        password: '',\r\n        formErrors: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            password: '',\r\n        }\r\n    });\r\n\r\n    const [resetPassword, setResetPassword] = useState({\r\n        email: '',\r\n        formErrors: {\r\n            email: ''\r\n        }\r\n    });\r\n\r\n    const [login, setLogin] = useState({\r\n        email: '',\r\n        password: '',\r\n        formErrors: {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    });\r\n\r\n    const [authenticating, setAuthenticating] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const router = useRouter();\r\n    const [success, setSuccess] = useState({\r\n        message: '',\r\n        token: '',\r\n        user: {\r\n            email: '',\r\n            firstName: '',\r\n            fullName: '',\r\n            lastName: '',\r\n            role: '',\r\n            _id: ''\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            user == null ? setisLogin(false) : setisLogin(true);\r\n            if(user){\r\n                user.getIdTokenResult().then(idTokenResult => {\r\n                    idTokenResult.claims.admin == true ? setisAdmin(true) : setisAdmin(false);\r\n                })\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleLoginChange = (e) => {\r\n        const { name, value } = e.target;\r\n        let newLogin = {...login, [name]: value }\r\n        return setLogin(newLogin)\r\n    }\r\n\r\n    const handleSignupChange = (e) => {\r\n        const { formErrors } = {...signup }\r\n        const { name, value } = e.target;\r\n        singupValidate(name, value, formErrors)\r\n        let newSignup = {...signup, [name]: value }\r\n        return setSignup(newSignup)\r\n    }\r\n\r\n    const handleSignupSubmit = async(e) => {\r\n        e.preventDefault();\r\n        const { firstName, lastName, email, phoneNumber, password } = signup;\r\n        auth.createUserWithEmailAndPassword(email, password).then(cred => {\r\n            return database.collection('Profile').doc(cred.user.uid).set({\r\n                phoneNumber,\r\n                email,\r\n                firstName,\r\n                lastName\r\n            })\r\n        }).then(() => {\r\n            setisLogin(true);\r\n            router.replace('dashboard');\r\n        })\r\n    }\r\n\r\n    const handleAdminSignUp = (e) => {\r\n        e.preventDefault();\r\n        const { firstName, lastName, email, phoneNumber, password } = signup;\r\n\r\n        const addAdminRole = functions.httpsCallable('addAdminRole')\r\n        addAdminRole({ email }).then(result => {\r\n            console.log(result)\r\n        });\r\n    }\r\n\r\n    const handleSignout = (e) => {\r\n        e.preventDefault();\r\n        auth.signOut().then(() => {\r\n            setTransaction([]);\r\n            // Sign-out successful.\r\n        }).catch((error) => {\r\n            // An error happened.\r\n        });\r\n    }\r\n    const passwordReset = (e) => {\r\n        e.preventDefault();\r\n        const { email } = resetPassword;\r\n        \r\n        console.log(email);\r\n        auth.sendPasswordResetEmail(email).then(() => {})\r\n            .catch((error) => {\r\n                setError(error.message);\r\n            })\r\n    }\r\n\r\n    const handlePasswordChange = (e) => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        const { formErrors } = resetPassword;\r\n        const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\n        formErrors.email = emailRegex.test(value) && value.length > 0 ? '' : '*input a valid email address*';\r\n        setResetPassword({...resetPassword, [name]: value });\r\n    }\r\n\r\n    const handleSocialLogin = (e) => {\r\n        provider.addScope('profile');\r\n        provider.addScope('email'); \r\n        auth.signInWithPopup(provider).then((result) => {\r\n            /** @type {firebase.auth.OAuthCredential} */\r\n            var credential = result.credential;\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            var token = credential.accessToken;\r\n            // The signed-in user info.\r\n            var user = result.user;\r\n            let data = user.displayName.split(\" \");\r\n            let firstName = data[0];\r\n            let lastName = data[1];\r\n            let email = result.user.email;\r\n            user && (user.uid && setLogin(true));\r\n            user && (user.uid && router.replace('dashboard'));\r\n            return database.collection('Profile').doc(result.user.uid).set({\r\n                    firstName,\r\n                    lastName,\r\n                    email\r\n                })\r\n                // ...\r\n        }).catch((error) => {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n        });\r\n    }\r\n\r\n    const handleLoginSubmit = (e) => {\r\n        e.preventDefault();\r\n        setAuthenticating(true);\r\n        const { email, password } = login;\r\n        auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n            var user = result.user;\r\n            user && (user.uid && setLogin(true));\r\n            user && (user.uid && router.replace('dashboard'));\r\n            user && (user.uid && setAuthenticating(false));\r\n        }).catch((error) => {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            setUserError(errorMessage);\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n        });\r\n    };\r\n\r\n    const handleAdminLogin = (e) => {\r\n        e.preventDefault();\r\n        const { email, password } = login;\r\n        auth.signInWithEmailAndPassword(email, password).then(() => {\r\n            setisAdmin(true);\r\n            router.replace('contact');\r\n        })\r\n    };\r\n\r\n\r\n\r\n    return ( \r\n        < AuthContext.Provider value = {{userError, authenticating, sessionToken, setSessionToken, passwordReset, resetPassword, handlePasswordChange, login, signup, isLogin, isAdmin, setisLogin, handleLoginChange, handleSocialLogin, handleSignupChange, handleAdminSignUp, handleSignout, handleSignupSubmit, handleLoginSubmit }} >\r\n             { props.children } \r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}