{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\RequestContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { gallery, message, offBack, contact } from \"../../svg\";\nimport { requestValidate } from '../validator/validate';\nimport { useRouter } from 'next/router';\nimport { auth, store, database, timestamp } from '../firebase';\nexport const RequestContext = /*#__PURE__*/createContext();\n\nconst RequestContextProvider = props => {\n  const initialState = {\n    cartons: \"\",\n    deliveryLocations: \"\",\n    descriptions: \"\",\n    itemsWorth: \"\",\n    receiverFirstName: '',\n    receiverPhoneNumber1: '',\n    receiverPhoneNumber2: '',\n    requestImages: [],\n    senderFirstName: '',\n    senderPhoneNumber1: '',\n    senderPhoneNumber2: '',\n    tagName: \"\",\n    otherItems: false,\n    formErrors: {\n      senderFirstName: '',\n      senderPhoneNumber1: '',\n      senderPhoneNumber2: '',\n      receiverFirstName: '',\n      receiverPhoneNumber1: '',\n      receiverPhoneNumber2: '',\n      cartons: '',\n      createdAt: '',\n      deliveryLocations: '',\n      descriptions: '',\n      itemsWorth: '',\n      otherItems: true,\n      status: '',\n      tagName: '',\n      amount: ''\n    }\n  };\n  const {\n    0: input,\n    1: setInput\n  } = useState(initialState);\n  const {\n    0: contacts,\n    1: setContacts\n  } = useState([]);\n  const {\n    0: extractedRequest,\n    1: setExtractedRequest\n  } = useState();\n  const {\n    0: sessionToken,\n    1: setSessionToken\n  } = useState();\n  const {\n    0: isLogin,\n    1: setisLogin\n  } = useState(false);\n  const {\n    0: temporaryImage,\n    1: setTemporaryImage\n  } = useState([]);\n  const {\n    0: requestImages,\n    1: setRequestImages\n  } = useState([]);\n  const {\n    0: count,\n    1: setCount\n  } = useState();\n  const {\n    0: form,\n    1: setForm\n  } = useState();\n  const {\n    0: requestSuccess,\n    1: setRequestSuccess\n  } = useState(false);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: userId,\n    1: setUserId\n  } = useState('');\n  const {\n    0: transaction,\n    1: setTransaction\n  } = useState([]);\n  const {\n    0: transactionInst,\n    1: setTransactionInst\n  } = useState();\n  useEffect(() => {\n    const data = [];\n    auth.onAuthStateChanged(user => {\n      user !== null && database.collection('Requests').where(\"userId\", \"==\", user.uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshots\n          let {\n            tagName,\n            createdAt,\n            status,\n            amount\n          } = doc.data();\n          let id = doc.id;\n          data.push({\n            tagName,\n            createdAt,\n            status,\n            amount,\n            id\n          });\n        });\n      });\n    });\n    setTransaction(data);\n  }, []);\n  useEffect(() => {\n    transactionInst !== undefined && setTransaction([...transaction, transactionInst]);\n  }, [transactionInst]);\n  console.log(transaction);\n  console.log(transactionInst);\n\n  const handleChange = e => {\n    if (e) {\n      e.preventDefault();\n      const {\n        name,\n        value,\n        id\n      } = e.target;\n\n      const {\n        formErrors\n      } = _objectSpread({}, input);\n\n      requestValidate(id, value, formErrors);\n\n      const newInput = _objectSpread(_objectSpread({}, input), {}, {\n        [name]: value\n      });\n\n      return setInput(newInput);\n    }\n  };\n\n  const handleCheck = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n\n    const newInput = _objectSpread(_objectSpread({}, input), {}, {\n      [name]: checked\n    });\n\n    return setInput(newInput);\n  };\n\n  useEffect(() => {\n    progress == 100 && setLoading(false);\n    setProgress(0);\n  }, [progress]);\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user !== null && setUserId(user.uid);\n    });\n  }, []);\n\n  const photoChange = e => {\n    e.preventDefault();\n\n    if (e.target.files) {\n      progress !== 100 && setLoading(true);\n      let selected = e.target.files[0];\n      let types = ['image/jpeg', 'image/png'];\n      let fileType = selected !== undefined ? types.includes(selected.type) : setError(\"unsupported image type* accepted image jpg/png\");\n      let FileSize = \"5000000\";\n      let filteredImageSize = fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\");\n      let perfectSize = filteredImageSize == true && URL.createObjectURL(selected);\n      let restructureUrl = {\n        imageSource: perfectSize\n      };\n      perfectSize !== undefined && setTemporaryImage([...temporaryImage, restructureUrl]);\n\n      if (filteredImageSize == true) {\n        const storageRef = store.ref(`requestImages/${selected.name}`);\n        storageRef.put(selected).on('state_changed', async snap => {\n          const newPercentage = (await (snap.bytesTransferred / snap.totalBytes)) * 100;\n          await setProgress(newPercentage);\n        }, async err => {\n          await setError(err);\n        }, async () => {\n          const cloudUrl = await storageRef.getDownloadURL();\n          setRequestImages([...requestImages, {\n            cloudUrl\n          }]);\n        });\n      }\n\n      URL.revokeObjectURL(selected);\n    }\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    const {\n      cartons,\n      deliveryLocations,\n      descriptions,\n      itemsWorth,\n      receiverFirstName,\n      receiverPhoneNumber1,\n      receiverPhoneNumber2,\n      requestImages,\n      senderFirstName,\n      senderPhoneNumber1,\n      senderPhoneNumber2,\n      tagName,\n      otherItems\n    } = input;\n    userId !== null && database.collection('Requests').add({\n      userId,\n      cartons,\n      deliveryLocations,\n      descriptions,\n      itemsWorth,\n      receiverFirstName,\n      receiverPhoneNumber1,\n      receiverPhoneNumber2,\n      requestImages,\n      senderFirstName,\n      senderPhoneNumber1,\n      senderPhoneNumber2,\n      tagName,\n      otherItems,\n      status: \"pending\",\n      createdAt: timestamp()\n    }).then(data => {\n      data && (setRequestSuccess(true), setInput(initialState), setTransactionInst({\n        tagName,\n        createdAt: timestamp(),\n        status: \"pending\",\n        id: \"hkaj$5%^gxn*8nk\",\n        amount: \"\"\n      }));\n    }).catch(error => {\n      setError(error);\n    });\n  };\n\n  const handleRequestUpdate = async (e, id) => {\n    e.preventDefault();\n    setInput(...input, requestImages);\n  };\n\n  const handleFormPreview = e => {\n    e.preventDefault();\n    setInput(_objectSpread(_objectSpread({}, input), {}, {\n      requestImages\n    }));\n    setCount(\"active\");\n  };\n\n  const selector = [{\n    content: \"contact\",\n    icon: contact(),\n    title: \"Contact\",\n    id: 1\n  }, {\n    content: \"gallery\",\n    icon: gallery(),\n    title: \"Gallery\",\n    id: 2\n  }, {\n    content: \"ShippingRequest\",\n    icon: offBack(),\n    title: \"Request\",\n    id: 3\n  }, {\n    content: \"\",\n    icon: message(),\n    title: \"Message\",\n    id: 4\n  }];\n  return /*#__PURE__*/_jsxDEV(RequestContext.Provider, {\n    value: {\n      transaction,\n      setTransaction,\n      transactionInst,\n      input,\n      error,\n      loading,\n      setRequestImages,\n      requestImages,\n      requestSuccess,\n      setRequestSuccess,\n      initialState,\n      setCount,\n      count,\n      setInput,\n      handleChange,\n      handleCheck,\n      temporaryImage,\n      handleFormSubmit,\n      handleFormPreview,\n      photoChange,\n      selector,\n      setExtractedRequest,\n      extractedRequest,\n      contacts,\n      setContacts,\n      handleRequestUpdate,\n      sessionToken,\n      isLogin,\n      setisLogin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RequestContextProvider;","map":{"version":3,"sources":["F:/G4 Logistics/FrontEnd/components/context/RequestContext.js"],"names":["React","createContext","useEffect","useState","gallery","message","offBack","contact","requestValidate","useRouter","auth","store","database","timestamp","RequestContext","RequestContextProvider","props","initialState","cartons","deliveryLocations","descriptions","itemsWorth","receiverFirstName","receiverPhoneNumber1","receiverPhoneNumber2","requestImages","senderFirstName","senderPhoneNumber1","senderPhoneNumber2","tagName","otherItems","formErrors","createdAt","status","amount","input","setInput","contacts","setContacts","extractedRequest","setExtractedRequest","sessionToken","setSessionToken","isLogin","setisLogin","temporaryImage","setTemporaryImage","setRequestImages","count","setCount","form","setForm","requestSuccess","setRequestSuccess","progress","setProgress","error","setError","router","loading","setLoading","userId","setUserId","transaction","setTransaction","transactionInst","setTransactionInst","data","onAuthStateChanged","user","collection","where","uid","get","then","querySnapshot","forEach","doc","id","push","undefined","console","log","handleChange","e","preventDefault","name","value","target","newInput","handleCheck","checked","photoChange","files","selected","types","fileType","includes","type","FileSize","filteredImageSize","size","perfectSize","URL","createObjectURL","restructureUrl","imageSource","storageRef","ref","put","on","snap","newPercentage","bytesTransferred","totalBytes","err","cloudUrl","getDownloadURL","revokeObjectURL","handleFormSubmit","add","catch","handleRequestUpdate","handleFormPreview","selector","content","icon","title","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\nimport {gallery, message, offBack, contact} from \"../../svg\";\r\nimport { requestValidate } from '../validator/validate';\r\nimport {useRouter} from 'next/router';\r\nimport {auth, store, database, timestamp} from '../firebase';\r\n\r\nexport const RequestContext = createContext();\r\n\r\nconst RequestContextProvider = (props) =>{\r\n\r\n    const initialState =\r\n        {cartons: \"\",\r\n        deliveryLocations: \"\",\r\n        descriptions: \"\",\r\n        itemsWorth: \"\",\r\n        receiverFirstName: '',\r\n        receiverPhoneNumber1: '',\r\n        receiverPhoneNumber2: '',\r\n        requestImages: [],\r\n        senderFirstName: '',\r\n        senderPhoneNumber1: '',\r\n        senderPhoneNumber2: '',\r\n        tagName: \"\",\r\n        otherItems: false,\r\n        formErrors: {\r\n            senderFirstName: '',\r\n            senderPhoneNumber1: '',\r\n            senderPhoneNumber2: '',\r\n            receiverFirstName: '',\r\n            receiverPhoneNumber1: '',\r\n            receiverPhoneNumber2: '',\r\n            cartons: '',\r\n            createdAt: '',\r\n            deliveryLocations: '',\r\n            descriptions: '',\r\n            itemsWorth: '',\r\n            otherItems: true,\r\n            status: '',\r\n            tagName: '',\r\n            amount: ''\r\n            }\r\n        };\r\n\r\n    const[input, setInput] = useState(initialState);\r\n    const [contacts, setContacts] = useState([]);\r\n    const [extractedRequest, setExtractedRequest] = useState();\r\n    const [sessionToken, setSessionToken] = useState();\r\n    const [isLogin, setisLogin] = useState(false);\r\n    const [temporaryImage, setTemporaryImage] = useState([]);\r\n    const [requestImages, setRequestImages] = useState([]);\r\n    const [count, setCount] = useState();\r\n    const [form, setForm] = useState();\r\n    const [requestSuccess, setRequestSuccess] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const router = useRouter();\r\n    const [loading, setLoading] = useState(false);\r\n    const [userId, setUserId] = useState('');\r\n    const [transaction, setTransaction] = useState([]);\r\n    const [transactionInst, setTransactionInst] = useState();\r\n\r\n    \r\n    useEffect (() => {\r\n          const data = [];\r\n          auth.onAuthStateChanged(user=>{\r\n                  user !== null && database.collection('Requests')\r\n                  .where(\"userId\", \"==\", user.uid)\r\n                  .get().then((querySnapshot) => {\r\n                          querySnapshot.forEach((doc) => {\r\n                              // doc.data() is never undefined for query doc snapshots\r\n                              let {tagName, createdAt, status, amount} = doc.data();\r\n                              let id = doc.id;\r\n                              data.push({tagName, createdAt, status, amount, id})\r\n                          });\r\n                      });\r\n                })\r\n                setTransaction(data);\r\n    }, []);\r\n\r\n    useEffect(() =>{\r\n      transactionInst !== undefined && (setTransaction([...transaction, transactionInst]));\r\n    }, [transactionInst])\r\nconsole.log(transaction);\r\nconsole.log(transactionInst);\r\n    const handleChange = (e) => {\r\n        if(e){\r\n          e.preventDefault();\r\n          const {name, value, id} = e.target;\r\n          const {formErrors} = {...input};\r\n          requestValidate(id, value, formErrors);\r\n          const newInput = { ...input, [name]: value };\r\n          return setInput(newInput);\r\n        }\r\n    }; \r\n    const handleCheck = (e)=>{\r\n    const {name, checked} = e.target;\r\n    const newInput = {...input, [name]: checked};\r\n    return setInput(newInput);\r\n   } \r\n   useEffect (()=> {\r\n    progress == 100 && setLoading(false);\r\n    setProgress(0);\r\n   }, [progress])\r\n\r\n   useEffect (()=> {\r\n    auth.onAuthStateChanged(user=>{\r\n      user !== null && setUserId(user.uid)\r\n    })\r\n   }, [])\r\n\r\nconst photoChange = (e) => {\r\n    e.preventDefault(); \r\n    \r\n  if(e.target.files){\r\n    progress !== 100 && setLoading(true) \r\n    let selected = e.target.files[0];\r\n    let types = ['image/jpeg', 'image/png'];\r\n    let fileType = selected !== undefined ? types.includes(selected.type): setError(\"unsupported image type* accepted image jpg/png\");\r\n    let FileSize = \"5000000\";\r\n    let filteredImageSize= fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\"); \r\n    let perfectSize = filteredImageSize == true && (URL.createObjectURL(selected)); \r\n    let restructureUrl = {imageSource: perfectSize}\r\n    perfectSize !== undefined && setTemporaryImage([...temporaryImage, restructureUrl]);\r\n      if(filteredImageSize == true ){\r\n      const storageRef = store.ref(`requestImages/${selected.name}`);\r\n        storageRef.put(selected).on('state_changed', \r\n        async (snap) => {\r\n          const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        await setProgress(newPercentage);\r\n        },  async (err) => {\r\n        await setError(err);\r\n        }, async () => {\r\n          const cloudUrl = await storageRef.getDownloadURL();\r\n          setRequestImages([...requestImages, {cloudUrl}]);\r\n        });\r\n      }\r\n     URL.revokeObjectURL(selected);   \r\n    }\r\n};\r\n\r\n\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const { cartons,\r\n        deliveryLocations,\r\n        descriptions,\r\n        itemsWorth,\r\n        receiverFirstName,\r\n        receiverPhoneNumber1,\r\n        receiverPhoneNumber2,\r\n        requestImages,\r\n        senderFirstName,\r\n        senderPhoneNumber1,\r\n        senderPhoneNumber2,\r\n        tagName,\r\n        otherItems} = input;\r\n\r\n        userId !== null && database.collection('Requests').add({ userId, cartons, deliveryLocations, descriptions, itemsWorth, receiverFirstName, receiverPhoneNumber1,\r\n          receiverPhoneNumber2, requestImages, senderFirstName, senderPhoneNumber1, senderPhoneNumber2, tagName, otherItems, status: \"pending\", createdAt: timestamp()})\r\n          .then((data) => {\r\n              data && (setRequestSuccess(true),\r\n              setInput(initialState),\r\n              setTransactionInst({tagName, createdAt: timestamp(), status: \"pending\", id: \"hkaj$5%^gxn*8nk\", amount: \"\" }));\r\n          })\r\n          .catch(\r\n            (error) => {\r\n              setError(error)\r\n            }\r\n          )\r\n    };\r\n\r\n\r\n    const handleRequestUpdate = async(e, id) => {\r\n      e.preventDefault();\r\n      setInput(...input, requestImages)\r\n    }\r\n\r\n    const handleFormPreview = (e) => {\r\n      e.preventDefault();\r\n      setInput({...input, requestImages});\r\n      setCount(\"active\");\r\n    }\r\n\r\n\r\n\r\n\r\n    const selector = [\r\n        {content: \"contact\" , icon: contact(), title: \"Contact\", id: 1 },\r\n        {content: \"gallery\", icon: gallery(), title: \"Gallery\", id: 2},\r\n        {content: \"ShippingRequest\", icon: offBack(), title: \"Request\", id: 3},\r\n        {content: \"\", icon: message(), title: \"Message\", id: 4}\r\n    ]\r\n\r\n\r\n    return (\r\n        <RequestContext.Provider value={{ transaction, setTransaction, transactionInst, input, error, loading, setRequestImages, requestImages, requestSuccess, setRequestSuccess, initialState, setCount, count, setInput, handleChange, handleCheck, temporaryImage, handleFormSubmit, handleFormPreview, photoChange, selector, setExtractedRequest, extractedRequest, contacts, setContacts, handleRequestUpdate, sessionToken, isLogin, setisLogin}}>\r\n            {props.children}\r\n        </RequestContext.Provider>\r\n    )\r\n}\r\n\r\nexport default RequestContextProvider;\r\n\r\n"]},"metadata":{},"sourceType":"module"}