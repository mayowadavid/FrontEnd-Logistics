{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\G4 Logistics\\\\FrontEnd\\\\components\\\\context\\\\ClientContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { profileValidate } from '../validator/validate';\nimport { auth, store, database } from '../firebase';\nimport { useRouter } from 'next/router';\nexport const ClientContext = /*#__PURE__*/createContext();\n\nconst ClientContextProvider = props => {\n  const initialState = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    address: '',\n    profileImage: '',\n    formErrors: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      address: ''\n    }\n  };\n  const router = useRouter();\n  const {\n    0: profile,\n    1: setProfile\n  } = useState(initialState);\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: profileImage,\n    1: setProfileImage\n  } = useState();\n  const {\n    0: temporaryImage,\n    1: setTemporaryImage\n  } = useState();\n  const {\n    0: count,\n    1: setCount\n  } = useState();\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      user !== null && database.collection('Profile').doc(user.uid).get().then(doc => {\n        let {\n          firstName,\n          lastName,\n          email,\n          phoneNumber,\n          address,\n          profileImage\n        } = doc.data();\n        let id = doc.id;\n        setData({\n          firstName,\n          lastName,\n          email,\n          phoneNumber,\n          address,\n          profileImage,\n          id\n        });\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const {\n      formErrors\n    } = initialState;\n    data !== undefined && setProfile(_objectSpread(_objectSpread({}, data), {}, {\n      formErrors\n    }));\n  }, [data]);\n\n  const handleProfileChange = e => {\n    e.preventDefault();\n\n    if (e.target.files) {\n      let selected = e.target.files[0];\n      let types = ['image/jpeg', 'image/png'];\n      let fileType = selected !== undefined ? types.includes(selected.type) : setError(\"unsupported image type* accepted image jpg/png\");\n      let FileSize = \"5000000\";\n      let filteredImageSize = fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\");\n      let hold = filteredImageSize == true && URL.createObjectURL(selected);\n      hold !== undefined && setTemporaryImage(hold);\n\n      if (filteredImageSize == true) {\n        const storageRef = store.ref(`profileimages/${selected.name}`);\n        storageRef.put(selected).on('state_changed', async snap => {\n          const newPercentage = (await (snap.bytesTransferred / snap.totalBytes)) * 100;\n          await setProgress(newPercentage);\n        }, async err => {\n          await setError(err);\n        }, async () => {\n          const newUrl = await storageRef.getDownloadURL();\n          await setProfileImage(newUrl);\n        });\n      }\n\n      URL.revokeObjectURL(selected);\n    }\n  };\n\n  const profileDetails = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n\n    let {\n      formErrors\n    } = _objectSpread({}, profile);\n\n    profileValidate(name, value, formErrors);\n    return setProfile(_objectSpread(_objectSpread({}, profile), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleProfileSubmit = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      address,\n      profileImage\n    } = profile;\n    database.collection('Profile').add({\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      address,\n      profileImage\n    });\n  };\n\n  const handleProfileUpdate = async e => {\n    e.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      address,\n      id,\n      profileImage\n    } = profile;\n    auth.onAuthStateChanged(user => {\n      user !== null && database.collection('Profile').doc(id).update({\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        address,\n        profileImage\n      });\n    });\n  };\n\n  const handleProfilePreview = e => {\n    e.preventDefault();\n    setProfile(_objectSpread(_objectSpread({}, profile), {}, {\n      profileImage\n    }));\n    setCount('active');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      handleProfileChange,\n      handleProfilePreview,\n      handleProfileSubmit,\n      handleProfileUpdate,\n      profile,\n      setProfile,\n      setTemporaryImage,\n      temporaryImage,\n      profileDetails,\n      profileImage,\n      setProfileImage,\n      count,\n      setCount\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ClientContextProvider;","map":{"version":3,"sources":["G:/G4 Logistics/FrontEnd/components/context/ClientContext.js"],"names":["React","createContext","useState","useEffect","profileValidate","auth","store","database","useRouter","ClientContext","ClientContextProvider","props","initialState","firstName","lastName","email","phoneNumber","address","profileImage","formErrors","router","profile","setProfile","data","setData","setProfileImage","temporaryImage","setTemporaryImage","count","setCount","error","setError","progress","setProgress","onAuthStateChanged","user","collection","doc","uid","get","then","id","undefined","handleProfileChange","e","preventDefault","target","files","selected","types","fileType","includes","type","FileSize","filteredImageSize","size","hold","URL","createObjectURL","storageRef","ref","name","put","on","snap","newPercentage","bytesTransferred","totalBytes","err","newUrl","getDownloadURL","revokeObjectURL","profileDetails","value","handleProfileSubmit","add","handleProfileUpdate","update","handleProfilePreview","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { profileValidate } from '../validator/validate';\r\nimport {auth, store, database} from '../firebase';\r\nimport { useRouter } from 'next/router';\r\n\r\nexport const ClientContext = createContext();\r\n\r\nconst ClientContextProvider = (props) => {\r\n\r\n    const initialState = {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      phoneNumber: '', \r\n      address: '',\r\n      profileImage: '',\r\n      formErrors: {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phoneNumber: '', \r\n        address: ''\r\n      }\r\n    }\r\n    const router = useRouter();\r\n    const [profile, setProfile] = useState(initialState);\r\n    const [data, setData] = useState();\r\n    const [profileImage, setProfileImage] = useState();\r\n    const [temporaryImage, setTemporaryImage]= useState();\r\n    const [count, setCount] = useState();\r\n    const [error, setError] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    useEffect(()=>{\r\n      auth.onAuthStateChanged(user=>{\r\n        user !== null && database.collection('Profile').doc(user.uid).get().then(doc=>{\r\n          let {firstName, lastName, email, phoneNumber, address, profileImage} = doc.data();\r\n          let id= doc.id;\r\n          setData({firstName, lastName, email, phoneNumber, address, profileImage, id})\r\n        })\r\n      })\r\n    }, [])\r\n\r\n\r\n\r\n    \r\n\r\n    useEffect(()=>{\r\n      const {formErrors} = initialState;\r\n      data !== undefined && setProfile({...data, formErrors})\r\n    }, [data])\r\n\r\n\r\n\r\n    const handleProfileChange = (e) => {\r\n        e.preventDefault();  \r\n        if(e.target.files){\r\n        let selected = e.target.files[0];\r\n        let types = ['image/jpeg', 'image/png'];\r\n       let fileType = selected !== undefined ? types.includes(selected.type): setError(\"unsupported image type* accepted image jpg/png\");\r\n          let FileSize = \"5000000\";\r\n         let filteredImageSize= fileType == true ? selected.size < FileSize : setError(\"file too large *5mb minimum\"); \r\n         let hold = filteredImageSize == true && (URL.createObjectURL(selected)); \r\n         hold !== undefined && setTemporaryImage(hold);\r\n          if(filteredImageSize == true ){\r\n          const storageRef = store.ref(`profileimages/${selected.name}`);\r\n            storageRef.put(selected).on('state_changed', \r\n            async (snap) => {\r\n              const newPercentage = await (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            await setProgress(newPercentage);\r\n            },  async (err) => {\r\n            await setError(err);\r\n            }, async () => {\r\n              const newUrl = await storageRef.getDownloadURL();\r\n            await setProfileImage(newUrl);\r\n            });\r\n          }\r\n         URL.revokeObjectURL(selected);   \r\n        }\r\n  };\r\n\r\n  const profileDetails = (e) => {\r\n    e.preventDefault();\r\n   \r\n    const {name, value} = e.target;\r\n    let {formErrors} = {...profile}\r\n\r\n    profileValidate(name, value, formErrors);\r\n      return setProfile({...profile,  [name]: value})  \r\n  }\r\n\r\n  const handleProfileSubmit = async(e) => {\r\n    e.preventDefault();\r\n    const {firstName, lastName, email, phoneNumber, address, profileImage}= profile;\r\n    database.collection('Profile').add({firstName,\r\n      lastName,\r\n      email,\r\n      phoneNumber, \r\n      address,\r\n      profileImage})\r\n  }; \r\n\r\n  const handleProfileUpdate = async(e) => {\r\n    e.preventDefault();\r\n    const {firstName, lastName, email, phoneNumber, address, id, profileImage}= profile;\r\n    auth.onAuthStateChanged(user=>{\r\n      user !== null && database.collection('Profile').doc(id).update({firstName,\r\n        lastName,\r\n        email,\r\n        phoneNumber, \r\n        address,\r\n        profileImage});\r\n    })\r\n    \r\n  }; \r\n  \r\n\r\n  const handleProfilePreview = (e) => {\r\n    e.preventDefault();\r\n    setProfile({...profile, profileImage});\r\n    setCount('active');\r\n  }\r\n\r\n\r\n\r\n    return (\r\n        <ClientContext.Provider value={{handleProfileChange, handleProfilePreview, handleProfileSubmit, handleProfileUpdate, profile, setProfile, setTemporaryImage, temporaryImage, profileDetails, profileImage, setProfileImage, count, setCount}}>\r\n            {props.children}\r\n        </ClientContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ClientContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}