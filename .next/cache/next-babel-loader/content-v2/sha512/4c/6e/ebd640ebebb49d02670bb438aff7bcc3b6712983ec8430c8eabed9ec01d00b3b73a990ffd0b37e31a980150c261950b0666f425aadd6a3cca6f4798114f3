{"ast":null,"code":"import _regeneratorRuntime from \"H:/G4 Logistics/FrontEnd/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"H:/G4 Logistics/FrontEnd/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"H:/G4 Logistics/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { ClientContext } from '../context/ClientContext';\nimport { store } from '../firebase';\n\nvar useStorage = function useStorage(image) {\n  _s();\n\n  var _useContext = useContext(ClientContext),\n      setError = _useContext.setError,\n      setUrl = _useContext.setUrl,\n      setProgress = _useContext.setProgress,\n      progress = _useContext.progress,\n      url = _useContext.url,\n      error = _useContext.error;\n\n  useEffect(function () {\n    // references\n    var storageRef = store.ref(\"profileimages/\".concat(image.name));\n    storageRef.put(image).on('state_changed', function (snap) {\n      var percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, function (err) {\n      setError(err);\n    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newUrl, refactor;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return storageRef.getDownloadURL();\n\n            case 2:\n              newUrl = _context.sent;\n              refactor = [].concat(_toConsumableArray(url), [{\n                newUrl: newUrl\n              }]);\n              setUrl(refactor);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  }, [image]);\n  return {\n    progress: progress,\n    url: url,\n    error: error\n  };\n};\n\n_s(useStorage, \"ew0Gka8HIqu8CkCOibpRbZDWoqo=\");\n\nexport default useStorage;","map":{"version":3,"sources":["H:/G4 Logistics/FrontEnd/components/fireBase/storageHook.js"],"names":["useState","useEffect","useContext","ClientContext","store","useStorage","image","setError","setUrl","setProgress","progress","url","error","storageRef","ref","name","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","newUrl","refactor"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAAQC,KAAR,QAAoB,aAApB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACkCJ,UAAU,CAACC,aAAD,CAD5C;AAAA,MACrBI,QADqB,eACrBA,QADqB;AAAA,MACXC,MADW,eACXA,MADW;AAAA,MACHC,WADG,eACHA,WADG;AAAA,MACUC,QADV,eACUA,QADV;AAAA,MACoBC,GADpB,eACoBA,GADpB;AAAA,MACyBC,KADzB,eACyBA,KADzB;;AAG5BX,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAMY,UAAU,GAAGT,KAAK,CAACU,GAAN,yBAA2BR,KAAK,CAACS,IAAjC,EAAnB;AAGAF,IAAAA,UAAU,CAACG,GAAX,CAAeV,KAAf,EAAsBW,EAAtB,CAAyB,eAAzB,EAA0C,UAACC,IAAD,EAAU;AAClD,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAZ,MAAAA,WAAW,CAACU,UAAD,CAAX;AACD,KAHD,EAGG,UAACG,GAAD,EAAS;AACVf,MAAAA,QAAQ,CAACe,GAAD,CAAR;AACD,KALD,wEAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoBT,UAAU,CAACU,cAAX,EADpB;;AAAA;AACKC,cAAAA,MADL;AAEGC,cAAAA,QAFH,gCAEkBd,GAFlB,IAEuB;AAACa,gBAAAA,MAAM,EAANA;AAAD,eAFvB;AAGDhB,cAAAA,MAAM,CAACiB,QAAD,CAAN;;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALH;AAWD,GAhBQ,EAgBN,CAACnB,KAAD,CAhBM,CAAT;AAoBA,SAAO;AAAEI,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,GAAG,EAAHA,GAAZ;AAAiBC,IAAAA,KAAK,EAALA;AAAjB,GAAP;AACD,CAxBD;;GAAMP,U;;AA0BN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport { ClientContext } from '../context/ClientContext';\r\nimport {store} from '../firebase';\r\n\r\nconst useStorage = (image) => {\r\n  const {setError, setUrl, setProgress, progress, url, error} = useContext(ClientContext);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = store.ref(`profileimages/${image.name}`);\r\n   \r\n    \r\n    storageRef.put(image).on('state_changed', (snap) => {\r\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    }, async () => {\r\n      const newUrl = await storageRef.getDownloadURL();\r\n      let refactor = [...url, {newUrl}]\r\n      setUrl(refactor);\r\n     \r\n    });\r\n  }, [image]);\r\n\r\n  \r\n\r\n  return { progress, url, error };\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}